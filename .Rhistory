head(McapFeatureStatTest) #Confirm changes
```
McapGenomeFeatures <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-CGMotif-Overlaps-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with CG motif and feature track overlaps
McapGenomeFeatures <- McapGenomeFeatures[-8,] #Remove final row
tail(McapGenomeFeatures) #Check import
McapGeneOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union_5x-mcGenes-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-gene overlaps
McapGeneOverlaps <- McapGeneOverlaps[-13,] #Remove final row
tail(McapGeneOverlaps) #Confirm import
McapGeneOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union_5x-mcGenes-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-gene overlaps
McapGeneOverlaps <- McapGeneOverlaps[-13,] #Remove final row
tail(McapGeneOverlaps) #Confirm import
McapCDSOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union_5x-mcCDS-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-CDS overlaps
McapCDSOverlaps <- McapCDSOverlaps[-13,] #Remove final row
tail(McapCDSOverlaps) #Confirm import
knitr::opts_chunk$set(echo = TRUE)
#install.packages("RColorBrewer")
require(RColorBrewer) #Load RColorBrewer
#install.packages("dichromat")
require(dichromat)
#install.packages("broom")
require(broom)
sessionInfo()
McapAll <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union_5x-averages-counts.txt", header = FALSE, col.names = c("totalLines", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
McapAll <- McapAll[-4,] #Remove last row (total lines for all files)
tail(McapAll) #Confirm import
McapMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union_5x-Meth-counts.txt", header = FALSE, col.names = c("Meth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
McapMeth <- McapMeth[-4,] #Remove last row (total lines for all files)
tail(McapMeth) #Confirm import
McapSparseMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union_5x-sparseMeth-counts.txt", header = FALSE, col.names = c("sparseMeth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
McapSparseMeth <- McapSparseMeth[-4,] #Remove last row (total lines for all files)
tail(McapSparseMeth) #Confirm import
McapUnMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union_5x-unMeth-counts.txt", header = FALSE, col.names = c("unMeth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
McapUnMeth <- McapUnMeth[-4,] #Remove last row (total lines for all files)
tail(McapUnMeth) #Confirm import
McapCpGType <- cbind(McapAll, McapMeth, McapSparseMeth, McapUnMeth) #Mash tables together by column
McapCpGType <- McapCpGType[,-c(2,4,6,8)] #Remove filename columns
tail(McapCpGType) #Confirm table mashing
McapCpGType$percentMeth <- (McapCpGType$Meth / McapCpGType$totalLines) * 100 #Calculate percent methylated loci
McapCpGType$percentSparseMeth <- (McapCpGType$sparseMeth / McapCpGType$totalLines) * 100 #Calculate percent sparsely methylated loci
McapCpGType$percentUnMeth <- (McapCpGType$unMeth / McapCpGType$totalLines) * 100 #Calculate percent unmethylated loci
McapCpGType <- McapCpGType[,c(1, 2, 5, 3, 6, 4, 7)] #Reorganize columns
tail(McapCpGType) #Confirm calculations
write.table(McapCpGType, "../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union-CpG-Type.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save summary table
McapCpGTypeStatTest <- McapCpGType[,c(2,4,6)] #Separate out count data for statistical testing
row.names(McapCpGTypeStatTest) <- c("WGBS", "RRBS", "MBDBS") #Add row names
head(McapCpGTypeStatTest) #Confirm changes
McapCpGTypeWGRR <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(McapCpGTypeStatTest)) { #For each CpG type
Method1CpG <- McapCpGTypeStatTest[1,i] #Variable for # CpG type for method 1
Method2CpG <- McapCpGTypeStatTest[2,i] #Variable for # CpG type for method 2
Method1NotCpG <- sum(McapCpGTypeStatTest[1,-i]) #Variable for # other CpG types for method 1
Method2NotCpG <- sum(McapCpGTypeStatTest[2,-i]) #Variable for # other CpG types for method 2
ct <- matrix(c(Method1CpG,Method2CpG,Method1NotCpG,Method2NotCpG), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(McapCpGTypeStatTest[i])), paste0("Not", colnames(McapCpGTypeStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(McapCpGTypeStatTest)[1:2])) #Assign row names: method 1, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$CpGType <- as.character(colnames(McapCpGTypeStatTest)[i]) #Add CpG type to results
McapCpGTypeWGRR <- rbind(McapCpGTypeWGRR, ctResults) #Add test statistics to master table
}
McapCpGTypeWGRR$p.adj <- p.adjust(McapCpGTypeWGRR$p.value, method = "fdr") #Correct p-value using FDR
McapCpGTypeWGRR$comparison <- rep("WGBS vs. RRBS", times = 3) #Add methods compared
head(McapCpGTypeWGRR) #Confirm changes
McapCpGTypeWGMB <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(McapCpGTypeStatTest)) { #For each CpG type
Method1CpG <- McapCpGTypeStatTest[1,i] #Variable for # CpG type for method 1
Method2CpG <- McapCpGTypeStatTest[3,i] #Variable for # CpG type for method 2
Method1NotCpG <- sum(McapCpGTypeStatTest[1,-i]) #Variable for # other CpG types for method 1
Method2NotCpG <- sum(McapCpGTypeStatTest[3,-i]) #Variable for # other CpG types for method 2
ct <- matrix(c(Method1CpG,Method2CpG,Method1NotCpG,Method2NotCpG), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(McapCpGTypeStatTest[i])), paste0("Not", colnames(McapCpGTypeStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(McapCpGTypeStatTest)[c(1,3)])) #Assign row names: method 1, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$CpGType <- as.character(colnames(McapCpGTypeStatTest)[i]) #Add CpG type to results
McapCpGTypeWGMB <- rbind(McapCpGTypeWGMB, ctResults) #Add test statistics to master table
}
McapCpGTypeWGMB$p.adj <- p.adjust(McapCpGTypeWGMB$p.value, method = "fdr") #Correct p-value using FDR
McapCpGTypeWGMB$comparison <- rep("WGBS vs. MBDBS", times = 3) #Add methods compared
head(McapCpGTypeWGMB) #Confirm changes
McapCpGTypeRRMB <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(McapCpGTypeStatTest)) { #For each CpG type
Method1CpG <- McapCpGTypeStatTest[2,i] #Variable for # CpG type for method 1
Method2CpG <- McapCpGTypeStatTest[3,i] #Variable for # CpG type for method 2
Method1NotCpG <- sum(McapCpGTypeStatTest[2,-i]) #Variable for # other CpG types for method 1
Method2NotCpG <- sum(McapCpGTypeStatTest[3,-i]) #Variable for # other CpG types for method 2
ct <- matrix(c(Method1CpG,Method2CpG,Method1NotCpG,Method2NotCpG), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(McapCpGTypeStatTest[i])), paste0("Not", colnames(McapCpGTypeStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(McapCpGTypeStatTest)[c(2,3)])) #Assign row names: method 1, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$CpGType <- as.character(colnames(McapCpGTypeStatTest)[i]) #Add CpG type to results
McapCpGTypeRRMB <- rbind(McapCpGTypeRRMB, ctResults) #Add test statistics to master table
}
McapCpGTypeRRMB$p.adj <- p.adjust(McapCpGTypeRRMB$p.value, method = "fdr") #Correct p-value using FDR
McapCpGTypeRRMB$comparison <- rep("RRBS vs. MBDBS", times = 3) #Add methods compared
head(McapCpGTypeRRMB) #Confirm changes
McapCpGTypeStatResults <- rbind(McapCpGTypeWGRR,
McapCpGTypeWGMB,
McapCpGTypeRRMB) #Combine tables
tail(McapCpGTypeStatResults) #Confirm changes
write.table(McapCpGTypeStatResults, "../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union-CpG-Type-StatResults.txt", quote = FALSE, row.names = FALSE) #Save table
McapCpGTypePercents <- McapCpGType[,c(3,5,7)] #Keep only percent information
head(McapCpGTypePercents) #Confirm changes
plotColors <- c(rev(RColorBrewer::brewer.pal(3, "Greens")),
rev(RColorBrewer::brewer.pal(3, "Blues")),
rev(RColorBrewer::brewer.pal(3, "Reds"))) #Create vector of WGBS, RRBS, and MBD colors
barplot(t(McapCpGTypePercents), col = dichromat(c(rev(RColorBrewer::brewer.pal(3, "Greens"))))) #Check greens
barplot(t(McapCpGTypePercents), col = dichromat(c(rev(RColorBrewer::brewer.pal(3, "Blues"))))) #Check blues
barplot(t(McapCpGTypePercents), col = dichromat(c(rev(RColorBrewer::brewer.pal(3, "Reds"))))) #Check reds
#pdf("../Output/Mcap_union-CpG-Type.pdf", height = 8.5, width = 11)
par(mar = c(2,5,0,1), oma = c(1, 1, 0, 10)) #Change figure boundaries
barplot(t(McapCpGTypePercents),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 1.5,
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:ncol(t(McapCpGTypePercents))){
xx <- t(McapCpGTypePercents)
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors[(3*i)-2], plotColors[(3*i)-1], plotColors[(3*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE) #Create new plot
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n") #Add new plot on top of current plot
legend(x = 0.62, y = 0.87,
xpd = TRUE,
legend = c("Strong", "Moderate", "Weak"),
pch = 22,
col = "black",
pt.bg = c("grey20", "grey50", "grey80"),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
text("Methylation Status", x = 0.85, y = 0.879, cex = 1.5) #Add legend title that is aligned with legend
#dev.off() #Turn off plotting device
PactAll <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-averages-counts.txt", header = FALSE, col.names = c("totalLines", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactAll <- PactAll[-4,] #Remove last row (total lines for all files)
tail(PactAll) #Confirm import
PactMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-Meth-counts.txt", header = FALSE, col.names = c("Meth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactMeth <- PactMeth[-4,] #Remove last row (total lines for all files)
tail(PactMeth) #Confirm import
PactSparseMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-sparseMeth-counts.txt", header = FALSE, col.names = c("sparseMeth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactSparseMeth <- PactSparseMeth[-4,] #Remove last row (total lines for all files)
tail(PactSparseMeth) #Confirm import
PactUnMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-unMeth-counts.txt", header = FALSE, col.names = c("unMeth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactUnMeth <- PactUnMeth[-4,] #Remove last row (total lines for all files)
tail(PactUnMeth) #Confirm import
PactCpGType <- cbind(PactAll, PactMeth, PactSparseMeth, PactUnMeth) #Mash tables together by column
PactCpGType <- PactCpGType[,-c(2,4,6,8)] #Remove filename columns
tail(PactCpGType) #Confirm table mashing
PactCpGType$percentMeth <- (PactCpGType$Meth / PactCpGType$totalLines) * 100 #Calculate percent methylated loci
PactCpGType$percentSparseMeth <- (PactCpGType$sparseMeth / PactCpGType$totalLines) * 100 #Calculate percent sparsely methylated loci
PactCpGType$percentUnMeth <- (PactCpGType$unMeth / PactCpGType$totalLines) * 100 #Calculate percent unmethylated loci
PactCpGType <- PactCpGType[,c(1, 2, 5, 3, 6, 4, 7)] #Reorganize columns
tail(PactCpGType) #Confirm calculations
write.table(PactCpGType, "../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-CpG-Type.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save summary table
PactCpGTypeStatTest <- PactCpGType[,c(2,4,6)] #Separate out count data for statistical testing
row.names(PactCpGTypeStatTest) <- c("WGBS", "RRBS", "MBDBS") #Add row names
head(PactCpGTypeStatTest) #Confirm changes
PactCpGTypeWGRR <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(PactCpGTypeStatTest)) { #For each CpG type
Method1CpG <- PactCpGTypeStatTest[1,i] #Variable for # CpG type for method 1
Method2CpG <- PactCpGTypeStatTest[2,i] #Variable for # CpG type for method 2
Method1NotCpG <- sum(PactCpGTypeStatTest[1,-i]) #Variable for # other CpG types for method 1
Method2NotCpG <- sum(PactCpGTypeStatTest[2,-i]) #Variable for # other CpG types for method 2
ct <- matrix(c(Method1CpG,Method2CpG,Method1NotCpG,Method2NotCpG), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(PactCpGTypeStatTest[i])), paste0("Not", colnames(PactCpGTypeStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(PactCpGTypeStatTest)[1:2])) #Assign row names: method 1, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$CpGType <- as.character(colnames(PactCpGTypeStatTest)[i]) #Add CpG type to results
PactCpGTypeWGRR <- rbind(PactCpGTypeWGRR, ctResults) #Add test statistics to master table
}
PactCpGTypeWGRR$p.adj <- p.adjust(PactCpGTypeWGRR$p.value, method = "fdr") #Correct p-value using FDR
PactCpGTypeWGRR$comparison <- rep("WGBS vs. RRBS", times = 3) #Add methods compared
head(PactCpGTypeWGRR) #Confirm changes
PactCpGTypeWGMB <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(PactCpGTypeStatTest)) { #For each CpG type
Method1CpG <- PactCpGTypeStatTest[1,i] #Variable for # CpG type for method 1
Method2CpG <- PactCpGTypeStatTest[3,i] #Variable for # CpG type for method 2
Method1NotCpG <- sum(PactCpGTypeStatTest[1,-i]) #Variable for # other CpG types for method 1
Method2NotCpG <- sum(PactCpGTypeStatTest[3,-i]) #Variable for # other CpG types for method 2
ct <- matrix(c(Method1CpG,Method2CpG,Method1NotCpG,Method2NotCpG), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(PactCpGTypeStatTest[i])), paste0("Not", colnames(PactCpGTypeStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(PactCpGTypeStatTest)[c(1,3)])) #Assign row names: method 1, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$CpGType <- as.character(colnames(PactCpGTypeStatTest)[i]) #Add CpG type to results
PactCpGTypeWGMB <- rbind(PactCpGTypeWGMB, ctResults) #Add test statistics to master table
}
PactCpGTypeWGMB$p.adj <- p.adjust(PactCpGTypeWGMB$p.value, method = "fdr") #Correct p-value using FDR
PactCpGTypeWGMB$comparison <- rep("WGBS vs. MBDBS", times = 3) #Add methods compared
head(PactCpGTypeWGMB) #Confirm changes
PactCpGTypeRRMB <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(PactCpGTypeStatTest)) { #For each CpG type
Method1CpG <- PactCpGTypeStatTest[2,i] #Variable for # CpG type for method 1
Method2CpG <- PactCpGTypeStatTest[3,i] #Variable for # CpG type for method 2
Method1NotCpG <- sum(PactCpGTypeStatTest[2,-i]) #Variable for # other CpG types for method 1
Method2NotCpG <- sum(PactCpGTypeStatTest[3,-i]) #Variable for # other CpG types for method 2
ct <- matrix(c(Method1CpG,Method2CpG,Method1NotCpG,Method2NotCpG), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(PactCpGTypeStatTest[i])), paste0("Not", colnames(PactCpGTypeStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(PactCpGTypeStatTest)[c(2,3)])) #Assign row names: method 1, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$CpGType <- as.character(colnames(PactCpGTypeStatTest)[i]) #Add CpG type to results
PactCpGTypeRRMB <- rbind(PactCpGTypeRRMB, ctResults) #Add test statistics to master table
}
PactCpGTypeRRMB$p.adj <- p.adjust(PactCpGTypeRRMB$p.value, method = "fdr") #Correct p-value using FDR
PactCpGTypeRRMB$comparison <- rep("RRBS vs. MBDBS", times = 3) #Add methods compared
head(PactCpGTypeRRMB) #Confirm changes
PactCpGTypeStatResults <- rbind(PactCpGTypeWGRR,
PactCpGTypeWGMB,
PactCpGTypeRRMB) #Combine tables
tail(PactCpGTypeStatResults) #Confirm changes
write.table(PactCpGTypeStatResults, "../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union-CpG-Type-StatResults.txt", quote = FALSE, row.names = FALSE) #Save table
PactCpGTypePercents <- PactCpGType[,c(3,5,7)] #Keep only percent information
head(PactCpGTypePercents) #Confirm changes
#pdf("../Output/Pact_union-CpG-Type.pdf", height = 8.5, width = 11)
par(mar = c(2,5,0,1), oma = c(1, 1, 0, 10)) #Change figure boundaries
barplot(t(PactCpGTypePercents),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 1.5,
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:ncol(t(PactCpGTypePercents))){
xx <- t(PactCpGTypePercents)
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors[(3*i)-2], plotColors[(3*i)-1], plotColors[(3*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE) #Create new plot
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n") #Add new plot on top of current plot
legend(x = 0.62, y = 0.87,
xpd = TRUE,
legend = c("Strong", "Moderate", "Weak"),
pch = 22,
col = "black",
pt.bg = c("grey20", "grey50", "grey80"),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
text("Methylation Status", x = 0.85, y = 0.879, cex = 1.5) #Add legend title that is aligned with legend
#dev.off() #Turn off plotting device
WGBSCpGType <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(PactCpGTypeStatTest)) { #For each CpG type
Species1CpG <- McapCpGTypeStatTest[1,i] #Variable for # CpG type for Species 1
Species2CpG <- PactCpGTypeStatTest[1,i] #Variable for # CpG type for Species 2
Species1NotCpG <- sum(McapCpGTypeStatTest[1,-i]) #Variable for # other CpG types for Species 1
Species2NotCpG <- sum(PactCpGTypeStatTest[1,-i]) #Variable for # other CpG types for Species 2
ct <- matrix(c(Species1CpG,Species2CpG,Species1NotCpG,Species2NotCpG), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(PactCpGTypeStatTest[i])), paste0("Not", colnames(PactCpGTypeStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c("Mcap", "Pact") #Assign row names: Species 1, Species 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$CpGType <- as.character(colnames(PactCpGTypeStatTest)[i]) #Add CpG type to results
WGBSCpGType <- rbind(WGBSCpGType, ctResults) #Add test statistics to master table
}
WGBSCpGType$p.adj <- p.adjust(WGBSCpGType$p.value, method = "fdr") #Correct p-value using FDR
WGBSCpGType$comparison <- rep("WGBS", times = 3) #Add methods compared
head(WGBSCpGType) #Confirm changes
RRBSCpGType <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(PactCpGTypeStatTest)) { #For each CpG type
Species1CpG <- McapCpGTypeStatTest[2,i] #Variable for # CpG type for Species 1
Species2CpG <- PactCpGTypeStatTest[2,i] #Variable for # CpG type for Species 2
Species1NotCpG <- sum(McapCpGTypeStatTest[2,-i]) #Variable for # other CpG types for Species 1
Species2NotCpG <- sum(PactCpGTypeStatTest[2,-i]) #Variable for # other CpG types for Species 2
ct <- matrix(c(Species1CpG,Species2CpG,Species1NotCpG,Species2NotCpG), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(PactCpGTypeStatTest[i])), paste0("Not", colnames(PactCpGTypeStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c("Mcap", "Pact") #Assign row names: Species 1, Species 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$CpGType <- as.character(colnames(PactCpGTypeStatTest)[i]) #Add CpG type to results
RRBSCpGType <- rbind(RRBSCpGType, ctResults) #Add test statistics to master table
}
RRBSCpGType$p.adj <- p.adjust(RRBSCpGType$p.value, method = "fdr") #Correct p-value using FDR
RRBSCpGType$comparison <- rep("RRBS", times = 3) #Add methods compared
head(RRBSCpGType) #Confirm changes
MBDBSCpGType <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(PactCpGTypeStatTest)) { #For each CpG type
Species1CpG <- McapCpGTypeStatTest[3,i] #Variable for # CpG type for Species 1
Species2CpG <- PactCpGTypeStatTest[3,i] #Variable for # CpG type for Species 2
Species1NotCpG <- sum(McapCpGTypeStatTest[3,-i]) #Variable for # other CpG types for Species 1
Species2NotCpG <- sum(PactCpGTypeStatTest[3,-i]) #Variable for # other CpG types for Species 2
ct <- matrix(c(Species1CpG,Species2CpG,Species1NotCpG,Species2NotCpG), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(PactCpGTypeStatTest[i])), paste0("Not", colnames(PactCpGTypeStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c("Mcap", "Pact") #Assign row names: Species 1, Species 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$CpGType <- as.character(colnames(PactCpGTypeStatTest)[i]) #Add CpG type to results
MBDBSCpGType <- rbind(MBDBSCpGType, ctResults) #Add test statistics to master table
}
MBDBSCpGType$p.adj <- p.adjust(MBDBSCpGType$p.value, method = "fdr") #CoMBDect p-value using FDR
MBDBSCpGType$comparison <- rep("MBDBS", times = 3) #Add methods compared
head(MBDBSCpGType) #Confirm changes
InterspeciesCpGTypeStatResults <- rbind(WGBSCpGType,
RRBSCpGType,
MBDBSCpGType) #Combine tables
tail(InterspeciesCpGTypeStatResults) #Confirm changes
write.table(InterspeciesCpGTypeStatResults, "../analyses/Characterizing-CpG-Methylation-5x-Union/Interspecies_union-CpG-Type-StatResults.txt", quote = FALSE, row.names = FALSE) #Save table
#pdf("../Output/Union-CpG-Type-Multipanel.pdf", height = 8.5, width = 11)
par(mar = c(1,5,1,0), oma = c(2, 1, 0, 11), mfrow = c(2,1)) #Change figure boundaries
#Mcap
barplot(t(McapCpGTypePercents),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:ncol(t(McapCpGTypePercents))){
xx <- t(McapCpGTypePercents)
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors[(3*i)-2], plotColors[(3*i)-1], plotColors[(3*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
text(expression(paste("a. ", italic("M. capitata"))), x = 0.06, y = 105, cex = 1.2, adj = 0) #Add italics species name
#Pact
barplot(t(PactCpGTypePercents),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 1.5,
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:ncol(t(PactCpGTypePercents))){
xx <- t(PactCpGTypePercents)
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors[(3*i)-2], plotColors[(3*i)-1], plotColors[(3*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
text(expression(paste("b. ", italic("P. acuta"))), x = 0.06, y = 105, cex = 1.2, adj = 0) #Add italics species name
#Add legend
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE) #Create new plot
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n") #Add new plot on top of current plot
legend(x = 0.62, y = 0.96,
xpd = TRUE,
legend = c("Strong", "Moderate", "Weak"),
pch = 22,
col = "black",
pt.bg = c("grey20", "grey50", "grey80"),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
text("Methylation Status", x = 0.85, y = 0.965, cex = 1.5) #Add legend title that is aligned with legend
#dev.off() #Turn off plotting device
McapGenomeFeatures <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-CGMotif-Overlaps-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with CG motif and feature track overlaps
McapGenomeFeatures <- McapGenomeFeatures[-8,] #Remove final row
tail(McapGenomeFeatures) #Check import
McapGeneOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union_5x-mcGenes-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-gene overlaps
McapGeneOverlaps <- McapGeneOverlaps[-13,] #Remove final row
tail(McapGeneOverlaps) #Confirm import
McapCDSOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union_5x-mcCDS-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-CDS overlaps
McapCDSOverlaps <- McapCDSOverlaps[-13,] #Remove final row
tail(McapCDSOverlaps) #Confirm import
McapIntronsOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union_5x-mcIntrons-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
McapIntronsOverlaps <- McapIntronsOverlaps[-13,] #Remove final row
tail(McapIntronsOverlaps) #Confirm import
McapFlanksOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union_5x-mcFlanks-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
McapFlanksOverlaps <- McapFlanksOverlaps[-13,] #Remove final row
tail(McapFlanksOverlaps) #Confirm import
McapFlanksUpstreamOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union_5x-mcFlanksUpstream-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
McapFlanksUpstreamOverlaps <- McapFlanksUpstreamOverlaps[-13,] #Remove final row
tail(McapFlanksUpstreamOverlaps) #Confirm import
McapFlanksDownstreamOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union_5x-mcFlanksDownstream-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
McapFlanksDownstreamOverlaps <- McapFlanksDownstreamOverlaps[-13,] #Remove final row
tail(McapFlanksDownstreamOverlaps) #Confirm import
McapIntergenicOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union_5x-mcIntergenic-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Intergenic overlaps
McapIntergenicOverlaps <- McapIntergenicOverlaps[-13,] #Remove final row
tail(McapIntergenicOverlaps) #Confirm import
McapFeatureOverlaps <- data.frame("allCpGs" = rep(0, times = 7),
"MBDBSMeth" = rep(0, times = 7),
"MBDBSsparseMeth" = rep(0, times = 7),
"MBDBSunMeth" = rep(0, times = 7),
"MBDBS" = rep(0, times = 7),
"RRBSMeth" = rep(0, times = 7),
"RRBSsparseMeth" = rep(0, times = 7),
"RRBSunMeth" = rep(0, times = 7),
"RRBS" = rep(0, times = 7),
"WGBSMeth" = rep(0, times = 7),
"WGBSsparseMeth" = rep(0, times = 7),
"WGBSunMeth" = rep(0, times = 7),
"WGBS" = rep(0, times = 7)) #Create blank dataframe with information for various CpG categories and methylation status. Match columns to the order of columns in the overlap count files
row.names(McapFeatureOverlaps) <- c("Genes", "CDS", "Introns", "Flanking Regions", "Upstream Flanks", "Downstream Flanks", "Intergenic") #Assign row names
head(McapFeatureOverlaps) #Confirm changes
McapFeatureOverlaps$allCpGs <- c(McapGenomeFeatures$counts[5],
McapGenomeFeatures$counts[1],
McapGenomeFeatures$counts[7],
McapGenomeFeatures$counts[3],
McapGenomeFeatures$counts[4],
McapGenomeFeatures$counts[2],
McapGenomeFeatures$counts[6]) #Assign information for CG motif overlaps with genome features. Use 0 for totalLines
head(McapFeatureOverlaps) #Confirm modification
for (i in 1:length(McapGeneOverlaps$counts)) {
McapFeatureOverlaps[1,i+1] <- McapGeneOverlaps[i,1]
McapFeatureOverlaps[2,i+1] <- McapCDSOverlaps[i,1]
McapFeatureOverlaps[3,i+1] <- McapIntronsOverlaps[i,1]
McapFeatureOverlaps[4,i+1] <- McapFlanksOverlaps[i,1]
McapFeatureOverlaps[5,i+1] <- McapFlanksUpstreamOverlaps[i,1]
McapFeatureOverlaps[6,i+1] <- McapFlanksDownstreamOverlaps[i,1]
McapFeatureOverlaps[7,i+1] <- McapIntergenicOverlaps[i,1]
} #For each table with feature overlap information, paste the contents of the count column in the assigned row
tail(McapFeatureOverlaps) #Check summary table
write.table(McapFeatureOverlaps, "../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union-Genomic-Location-Counts.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
McapFeatureStatTest <- data.frame(t(McapFeatureOverlaps[-c(1,4),c(1,13,9,5)])) #Separate out count data for statistical testing. Remove gene and total flank information. Transpose and save as dataframe so methods are row names
head(McapFeatureStatTest) #Confirm changes
McapFeatureAllWG <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(McapFeatureStatTest)) { #For each feature
AllFeature <- McapFeatureStatTest[1,i] #Variable for # feature overlap with background CpGs
MethodFeature <- McapFeatureStatTest[2,i] #Variable for # feature overlap with method CpGs
AllNotFeature <- sum(McapFeatureStatTest[1,-i]) #Variable for # other feature overlap with background CpGs
MethodNotFeature <- sum(McapFeatureStatTest[2,-i]) #Variable for # other feature overlap with method CpGs
ct <- matrix(c(AllFeature,MethodFeature,AllNotFeature,MethodNotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(McapFeatureStatTest[i])), paste0("Not", colnames(McapFeatureStatTest[i]))) #Assign column names: feature, not feature
rownames(ct) <- c(as.character(row.names(McapFeatureStatTest)[c(1,2)])) #Assign row names: all, method
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(prop.test(ct, correct = FALSE))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$FeatureType <- as.character(colnames(McapFeatureStatTest)[i]) #Add feature to results
McapFeatureAllWG <- rbind(McapFeatureAllWG, ctResults) #Add test statistics to master table
}
McapFeatureAllWG$p.adj <- p.adjust(McapFeatureAllWG$p.value, method = "fdr") #Correct p-value using FDR
McapFeatureAllWG$comparison <- rep("All vs. WGBS", times = 5) #Add methods compared
head(McapFeatureAllWG) #Confirm changes
McapFeatureAllRR <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(McapFeatureStatTest)) { #For each feature
AllFeature <- McapFeatureStatTest[1,i] #Variable for # feature overlap with background CpGs
MethodFeature <- McapFeatureStatTest[3,i] #Variable for # feature overlap with method CpGs
AllNotFeature <- sum(McapFeatureStatTest[1,-i]) #Variable for # other feature overlap with background CpGs
MethodNotFeature <- sum(McapFeatureStatTest[3,-i]) #Variable for # other feature overlap with method CpGs
ct <- matrix(c(AllFeature,MethodFeature,AllNotFeature,MethodNotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(McapFeatureStatTest[i])), paste0("Not", colnames(McapFeatureStatTest[i]))) #Assign column names: feature, not feature
rownames(ct) <- c(as.character(row.names(McapFeatureStatTest)[c(1,3)])) #Assign row names: all, method
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(prop.test(ct, correct = FALSE))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$FeatureType <- as.character(colnames(McapFeatureStatTest)[i]) #Add feature to results
McapFeatureAllRR <- rbind(McapFeatureAllRR, ctResults) #Add test statistics to master table
}
McapFeatureAllRR$p.adj <- p.adjust(McapFeatureAllRR$p.value, method = "fdr") #Correct p-value using FDR
McapFeatureAllRR$comparison <- rep("All vs. RRBS", times = 5) #Add methods compared
head(McapFeatureAllRR) #Confirm changes
McapFeatureAllMB <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(McapFeatureStatTest)) { #For each feature
AllFeature <- McapFeatureStatTest[1,i] #Variable for # feature overlap with background CpGs
MethodFeature <- McapFeatureStatTest[4,i] #Variable for # feature overlap with method CpGs
AllNotFeature <- sum(McapFeatureStatTest[1,-i]) #Variable for # other feature overlap with background CpGs
MethodNotFeature <- sum(McapFeatureStatTest[4,-i]) #Variable for # other feature overlap with method CpGs
ct <- matrix(c(AllFeature,MethodFeature,AllNotFeature,MethodNotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(McapFeatureStatTest[i])), paste0("Not", colnames(McapFeatureStatTest[i]))) #Assign column names: feature, not feature
rownames(ct) <- c(as.character(row.names(McapFeatureStatTest)[c(1,4)])) #Assign row names: all, method
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(prop.test(ct, correct = FALSE))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$FeatureType <- as.character(colnames(McapFeatureStatTest)[i]) #Add feature to results
McapFeatureAllMB <- rbind(McapFeatureAllMB, ctResults) #Add test statistics to master table
}
McapFeatureAllMB$p.adj <- p.adjust(McapFeatureAllMB$p.value, method = "fdr") #Correct p-value using FDR
McapFeatureAllMB$comparison <- rep("All vs. MBDBS", times = 5) #Add methods compared
head(McapFeatureAllMB) #Confirm changes
McapFeatureWGRR <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(McapFeatureStatTest)) { #For each feature
Method1Feature <- McapFeatureStatTest[2,i] #Variable for # feature for method 1
Method2Feature <- McapFeatureStatTest[3,i] #Variable for # feature for method 2
Method1NotFeature <- sum(McapFeatureStatTest[2,-i]) #Variable for # other feature for method 1
Method2NotFeature <- sum(McapFeatureStatTest[3,-i]) #Variable for # other feature for method 2
ct <- matrix(c(Method1Feature,Method2Feature,Method1NotFeature,Method2NotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(McapFeatureStatTest[i])), paste0("Not", colnames(McapFeatureStatTest[i]))) #Assign column names: feature, not feature
rownames(ct) <- c(as.character(row.names(McapFeatureStatTest)[c(2,3)])) #Assign row names: method 1, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(prop.test(ct, correct = FALSE))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$FeatureType <- as.character(colnames(McapFeatureStatTest)[i]) #Add feature to results
McapFeatureWGRR <- rbind(McapFeatureWGRR, ctResults) #Add test statistics to master table
}
McapFeatureWGRR$p.adj <- p.adjust(McapFeatureWGRR$p.value, method = "fdr") #Correct p-value using FDR
McapFeatureWGRR$comparison <- rep("WGBS vs. RRBS", times = 5) #Add methods compared
head(McapFeatureWGRR) #Confirm changes
McapFeatureWGMB <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(McapFeatureStatTest)) { #For each feature
Method1Feature <- McapFeatureStatTest[2,i] #Variable for # feature for method 1
Method2Feature <- McapFeatureStatTest[4,i] #Variable for # feature for method 2
Method1NotFeature <- sum(McapFeatureStatTest[2,-i]) #Variable for # other feature for method 1
Method2NotFeature <- sum(McapFeatureStatTest[4,-i]) #Variable for # other feature for method 2
ct <- matrix(c(Method1Feature,Method2Feature,Method1NotFeature,Method2NotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(McapFeatureStatTest[i])), paste0("Not", colnames(McapFeatureStatTest[i]))) #Assign column names: feature, not feature
rownames(ct) <- c(as.character(row.names(McapFeatureStatTest)[c(2,4)])) #Assign row names: method 1, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(prop.test(ct, correct = FALSE))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$FeatureType <- as.character(colnames(McapFeatureStatTest)[i]) #Add feature to results
McapFeatureWGMB <- rbind(McapFeatureWGMB, ctResults) #Add test statistics to master table
}
McapFeatureWGMB$p.adj <- p.adjust(McapFeatureWGMB$p.value, method = "fdr") #Correct p-value using FDR
McapFeatureWGMB$comparison <- rep("WGBS vs. MBDBS", times = 5) #Add methods compared
head(McapFeatureWGMB) #Confirm changes
McapFeatureRRMB <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(McapFeatureStatTest)) { #For each feature
Method1Feature <- McapFeatureStatTest[3,i] #Variable for # feature for method 1
Method2Feature <- McapFeatureStatTest[4,i] #Variable for # feature for method 2
Method1NotFeature <- sum(McapFeatureStatTest[3,-i]) #Variable for # other feature for method 1
Method2NotFeature <- sum(McapFeatureStatTest[4,-i]) #Variable for # other feature for method 2
ct <- matrix(c(Method1Feature,Method2Feature,Method1NotFeature,Method2NotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(McapFeatureStatTest[i])), paste0("Not", colnames(McapFeatureStatTest[i]))) #Assign column names: feature, not feature
rownames(ct) <- c(as.character(row.names(McapFeatureStatTest)[c(3,4)])) #Assign row names: method 1, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(prop.test(ct, correct = FALSE))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$FeatureType <- as.character(colnames(McapFeatureStatTest)[i]) #Add feature to results
McapFeatureRRMB <- rbind(McapFeatureRRMB, ctResults) #Add test statistics to master table
}
McapFeatureRRMB$p.adj <- p.adjust(McapFeatureRRMB$p.value, method = "fdr") #Correct p-value using FDR
McapFeatureRRMB$comparison <- rep("RRBS vs. MBDBS", times = 5) #Add methods compared
head(McapFeatureRRMB) #Confirm changes
