McapCpGType$percentSparseMeth <- (McapCpGType$sparseMeth / McapCpGType$totalLines) * 100 #Calculate percent sparsely methylated loci
McapCpGType$percentUnMeth <- (McapCpGType$unMeth / McapCpGType$totalLines) * 100 #Calculate percent unmethylated loci
McapCpGType <- McapCpGType[,c(1, 2, 5, 3, 6, 4, 7)] #Reorganize columns
tail(McapCpGType) #Confirm calculations
write.table(McapCpGType, "../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union-CpG-Type.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save summary table
McapCpGTypePercents <- McapCpGType[,c(3,5,7)] #Keep only percent information
head(McapCpGTypePercents) #Confirm changes
plotColors <- c(rev(RColorBrewer::brewer.pal(3, "Greens")),
rev(RColorBrewer::brewer.pal(3, "Purples")),
rev(RColorBrewer::brewer.pal(3, "Oranges"))) #Create vector of WGBS, RRBS, and MBD colors
barplot(t(McapCpGTypePercents), col = c(rev(RColorBrewer::brewer.pal(3, "Greens")))) #Check greens
barplot(t(McapCpGTypePercents), col = c(rev(RColorBrewer::brewer.pal(3, "Purples")))) #Check blues
barplot(t(McapCpGTypePercents), col = c(rev(RColorBrewer::brewer.pal(3, "Oranges")))) #Check reds
barplot(t(McapCpGTypePercents), col = dichromat(c(rev(RColorBrewer::brewer.pal(3, "Greens"))))) #Check greens
barplot(t(McapCpGTypePercents), col = dichromat(c(rev(RColorBrewer::brewer.pal(3, "Purples"))))) #Check blues
barplot(t(McapCpGTypePercents), col = dichromat(c(rev(RColorBrewer::brewer.pal(3, "Oranges"))))) #Check reds
#pdf("../Output/Mcap_union-CpG-Type.pdf", height = 8.5, width = 11)
par(mar = c(2,5,0,1), oma = c(1, 1, 0, 12)) #Change figure boundaries
barplot(t(McapCpGTypePercents),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBDBS"), cex.names = 1.5,
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:ncol(t(McapCpGTypePercents))){
xx <- t(McapCpGTypePercents)
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors[(3*i)-2], plotColors[(3*i)-1], plotColors[(3*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE) #Create new plot
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n") #Add new plot on top of current plot
legend(x = 0.54, y = 0.87,
xpd = TRUE,
legend = c(expression("High (">="50%)"), "Moderate (10-50%)", expression("Low ("<="10%)")),
pch = 22,
col = "black",
pt.bg = c("grey20", "grey50", "grey80"),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
text("Methylation Status", x = 0.77, y = 0.879, cex = 1.5) #Add legend title that is aligned with legend
#dev.off() #Turn off plotting device
PactAll <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-averages-counts.txt", header = FALSE, col.names = c("totalLines", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactAll <- PactAll[-4,] #Remove last row (total lines for all files)
tail(PactAll) #Confirm import
PactMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-Meth-counts.txt", header = FALSE, col.names = c("Meth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactMeth <- PactMeth[-4,] #Remove last row (total lines for all files)
tail(PactMeth) #Confirm import
PactSparseMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-sparseMeth-counts.txt", header = FALSE, col.names = c("sparseMeth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactSparseMeth <- PactSparseMeth[-4,] #Remove last row (total lines for all files)
tail(PactSparseMeth) #Confirm import
PactUnMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-unMeth-counts.txt", header = FALSE, col.names = c("unMeth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactUnMeth <- PactUnMeth[-4,] #Remove last row (total lines for all files)
tail(PactUnMeth) #Confirm import
PactCpGType <- cbind(PactAll, PactMeth, PactSparseMeth, PactUnMeth) #Mash tables together by column
PactCpGType <- PactCpGType[,-c(2,4,6,8)] #Remove filename columns
rownames(PactCpGType) <- c("MBDBS", "RRBS", "WGBS") #Add rownames
PactCpGType <- PactCpGType[c(3,2,1),] #Order rows: WGBS, RRBS, MBDBS
tail(PactCpGType) #Confirm table mashing
PactCpGType$percentMeth <- (PactCpGType$Meth / PactCpGType$totalLines) * 100 #Calculate percent methylated loci
PactCpGType$percentSparseMeth <- (PactCpGType$sparseMeth / PactCpGType$totalLines) * 100 #Calculate percent sparsely methylated loci
PactCpGType$percentUnMeth <- (PactCpGType$unMeth / PactCpGType$totalLines) * 100 #Calculate percent unmethylated loci
PactCpGType <- PactCpGType[,c(1, 2, 5, 3, 6, 4, 7)] #Reorganize columns
tail(PactCpGType) #Confirm calculations
write.table(PactCpGType, "../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-CpG-Type.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save summary table
PactCpGTypePercents <- PactCpGType[,c(3,5,7)] #Keep only percent information
head(PactCpGTypePercents) #Confirm changes
#pdf("../Output/Pact_union-CpG-Type.pdf", height = 8.5, width = 11)
par(mar = c(2,5,0,1), oma = c(1, 1, 0, 12)) #Change figure boundaries
barplot(t(PactCpGTypePercents),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBDBS"), cex.names = 1.5,
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:ncol(t(PactCpGTypePercents))){
xx <- t(PactCpGTypePercents)
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors[(3*i)-2], plotColors[(3*i)-1], plotColors[(3*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE) #Create new plot
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n") #Add new plot on top of current plot
legend(x = 0.54, y = 0.87,
xpd = TRUE,
legend = c(expression("High (">="50%)"), "Moderate (10-50%)", expression("Low ("<="10%)")),
pch = 22,
col = "black",
pt.bg = c("grey20", "grey50", "grey80"),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
text("Methylation Status", x = 0.77, y = 0.879, cex = 1.5) #Add legend title that is aligned with legend
#dev.off() #Turn off plotting device
#pdf("../Output/Union-CpG-Type-Multipanel.pdf", height = 8.5, width = 11)
par(mar = c(1,5,1,0), oma = c(2, 1, 0, 12), mfrow = c(2,1)) #Change figure boundaries
#Mcap
barplot(t(McapCpGTypePercents),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 113)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:ncol(t(McapCpGTypePercents))){
xx <- t(McapCpGTypePercents)
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors[(3*i)-2], plotColors[(3*i)-1], plotColors[(3*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
text(expression(paste(bold("A. "), bolditalic("M. capitata"))), x = 0.06, y = 108, cex = 1.5, adj = 0) #Add italics species name
#Pact
barplot(t(PactCpGTypePercents),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBDBS"), cex.names = 1.5,
ylim = c(0, 113)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:ncol(t(PactCpGTypePercents))){
xx <- t(PactCpGTypePercents)
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors[(3*i)-2], plotColors[(3*i)-1], plotColors[(3*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
text(expression(paste(bold("B. "), bolditalic("P. acuta"))), x = 0.06, y = 108, cex = 1.5, adj = 0) #Add italics species name
#Add legend
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE) #Create new plot
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n") #Add new plot on top of current plot
legend(x = 0.57, y = 0.90,
xpd = TRUE,
legend = c(expression("High (">="50%)"), "Moderate (10-50%)", expression("Weak ("<="10%)")),
pch = 22,
col = "black",
pt.bg = c("grey20", "grey50", "grey80"),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
text("Methylation Status", x = 0.80, y = 0.92, cex = 1.5) #Add legend title that is aligned with legend
#dev.off() #Turn off plotting device
pdf("../Output/Union-CpG-Type-Multipanel.pdf", height = 8.5, width = 11)
par(mar = c(1,5,1,0), oma = c(2, 1, 0, 12), mfrow = c(2,1)) #Change figure boundaries
#Mcap
barplot(t(McapCpGTypePercents),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 113)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:ncol(t(McapCpGTypePercents))){
xx <- t(McapCpGTypePercents)
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors[(3*i)-2], plotColors[(3*i)-1], plotColors[(3*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
text(expression(paste(bold("A. "), bolditalic("M. capitata"))), x = 0.06, y = 108, cex = 1.5, adj = 0) #Add italics species name
#Pact
barplot(t(PactCpGTypePercents),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBDBS"), cex.names = 1.5,
ylim = c(0, 113)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:ncol(t(PactCpGTypePercents))){
xx <- t(PactCpGTypePercents)
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors[(3*i)-2], plotColors[(3*i)-1], plotColors[(3*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
text(expression(paste(bold("B. "), bolditalic("P. acuta"))), x = 0.06, y = 108, cex = 1.5, adj = 0) #Add italics species name
#Add legend
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE) #Create new plot
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n") #Add new plot on top of current plot
legend(x = 0.57, y = 0.90,
xpd = TRUE,
legend = c(expression("High (">="50%)"), "Moderate (10-50%)", expression("Low ("<="10%)")),
pch = 22,
col = "black",
pt.bg = c("grey20", "grey50", "grey80"),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
text("Methylation Status", x = 0.80, y = 0.92, cex = 1.5) #Add legend title that is aligned with legend
dev.off() #Turn off plotting device
#pdf("../Output/Union-CpG-Type-Multipanel.pdf", height = 8.5, width = 11)
par(mar = c(1,5,1,0), oma = c(2, 1, 0, 12), mfrow = c(2,1)) #Change figure boundaries
#Mcap
barplot(t(McapCpGTypePercents),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 113)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:ncol(t(McapCpGTypePercents))){
xx <- t(McapCpGTypePercents)
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors[(3*i)-2], plotColors[(3*i)-1], plotColors[(3*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
text(expression(paste(bold("A. "), bolditalic("M. capitata"))), x = 0.06, y = 108, cex = 1.5, adj = 0) #Add italics species name
#Pact
barplot(t(PactCpGTypePercents),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBDBS"), cex.names = 1.5,
ylim = c(0, 113)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:ncol(t(PactCpGTypePercents))){
xx <- t(PactCpGTypePercents)
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors[(3*i)-2], plotColors[(3*i)-1], plotColors[(3*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
text(expression(paste(bold("B. "), bolditalic("P. acuta"))), x = 0.06, y = 108, cex = 1.5, adj = 0) #Add italics species name
#Add legend
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE) #Create new plot
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n") #Add new plot on top of current plot
legend(x = 0.57, y = 0.90,
xpd = TRUE,
legend = c(expression("High (">="50%)"), "Moderate (10-50%)", expression("Low ("<="10%)")),
pch = 22,
col = "black",
pt.bg = c("grey20", "grey50", "grey80"),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
text("Methylation Status", x = 0.80, y = 0.92, cex = 1.5) #Add legend title that is aligned with legend
#dev.off() #Turn off plotting device
setwd("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Median-Methylation-Calculations") #Set working directory within the notebook chunk for list.files to find the necessary files
filesToImport <- list.files(pattern = "*geneID") #Create a file list for all 9 files to import. Only import overlaps for full samples (not divided by methylation status)
list2env(lapply(setNames(filesToImport,
make.names(gsub("_R1_001_val_1_bismark_bt2_pe._5x.bedgraph.bed-mcGenes-geneID", "", filesToImport))),
read.delim),
envir = .GlobalEnv) #Import files to the .GlobalEnv with list2env. Use lapply to setNames of the files by taking all the common parts of their names out. Read files with read.delim (can only use defaults = header = TRUE, sep = "\t"). Files will be named Meth#-mcGenes
head(Meth10) #Confirm import
setwd("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Median-Methylation-Calculations") #Set working directory within the notebook chunk for list.files to find the necessary files
filesToImport <- list.files(pattern = "*geneID") #Create a file list for all 9 files to import. Only import overlaps for full samples (not divided by methylation status)
list2env(lapply(setNames(filesToImport,
make.names(gsub("_R1_001_val_1_bismark_bt2_pe._5x.bedgraph.bed-mcGenes-geneID", "", filesToImport))),
read.delim(header = FALSE)),
envir = .GlobalEnv) #Import files to the .GlobalEnv with list2env. Use lapply to setNames of the files by taking all the common parts of their names out. Read files with read.delim (can only use defaults = header = TRUE, sep = "\t"). Files will be named Meth#-mcGenes
?read.table
setwd("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Median-Methylation-Calculations") #Set working directory within the notebook chunk for list.files to find the necessary files
filesToImport <- list.files(pattern = "*geneID") #Create a file list for all 9 files to import. Only import overlaps for full samples (not divided by methylation status)
list2env(lapply(setNames(filesToImport,
make.names(gsub("_R1_001_val_1_bismark_bt2_pe._5x.bedgraph.bed-mcGenes-geneID", "", filesToImport))),
read.delim(header = FALSE)),
envir = .GlobalEnv) #Import files to the .GlobalEnv with list2env. Use lapply to setNames of the files by taking all the common parts of their names out. Read files with read.delim (can only use defaults = header = TRUE, sep = "\t"). Files will be named Meth#-mcGenes
setwd("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Median-Methylation-Calculations") #Set working directory within the notebook chunk for list.files to find the necessary files
filesToImport <- list.files(pattern = "*geneID") #Create a file list for all 9 files to import. Only import overlaps for full samples (not divided by methylation status)
list2env(lapply(setNames(filesToImport,
make.names(gsub("_R1_001_val_1_bismark_bt2_pe._5x.bedgraph.bed-mcGenes-geneID", "", filesToImport))),
read.delim, header = FALSE),
envir = .GlobalEnv) #Import files to the .GlobalEnv with list2env. Use lapply to setNames of the files by taking all the common parts of their names out. Read files with read.delim (can only use defaults = header = TRUE, sep = "\t"). Files will be named Meth#-mcGenes
head(Meth10) #Confirm import
Meth10 <- Meth10[,-c(5:12)] #Remove extraneous columns
colnames(Meth10) <- c("chr", "start", "stop", "percentMeth", "geneID") #Modify column names
head(Meth10) #Confirm column naming
percentMeth10 <- aggregate(percentMeth ~ geneID, data = Meth10, FUN = median) #Use aggregate to group geneID and calculate median percent methylation
head(percentMeth10) #Confirm percent methylation calculation
samplesMcap <- list(Meth1*)
samplesMcap <- list(Meth10,
Meth11,
Meth12,
Meth13,
Meth14,
Meth15,
Meth16,
Meth17,
Meth18) #Create a list of samples
samplesMcap
samplesMcap <- c(Meth10,
Meth11,
Meth12,
Meth13,
Meth14,
Meth15,
Meth16,
Meth17,
Meth18) #Create a list of samples
samplesMcap
samplesMcap <- list("Meth10",
"Meth11",
"Meth12",
"Meth13",
"Meth14",
"Meth15",
"Meth16",
"Meth17",
"Meth18") #Create a list of samples
samplesMcap #Look at sample list
samplesMcap <- list("Meth10",
"Meth11",
"Meth12",
"Meth13",
"Meth14",
"Meth15",
"Meth16",
"Meth17",
"Meth18") #Create a list of samples
setwd("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Median-Methylation-Calculations") #Set working directory within the notebook chunk for list.files to find the necessary files
filesToImport <- list.files(pattern = "*geneID") #Create a file list for all 9 files to import. Only import overlaps for full samples (not divided by methylation status)
list2env(lapply(setNames(filesToImport,
make.names(gsub("_R1_001_val_1_bismark_bt2_pe._5x.bedgraph.bed-mcGenes-geneID", "", filesToImport))),
read.delim, header = FALSE),
envir = .GlobalEnv) #Import files to the .GlobalEnv with list2env. Use lapply to setNames of the files by taking all the common parts of their names out. Read files with read.delim and include header = FALSE. Files will be named Meth#
head(Meth10) #Confirm import
samplesMcap <- list("Meth10",
"Meth11",
"Meth12",
"Meth13",
"Meth14",
"Meth15",
"Meth16",
"Meth17",
"Meth18") #Create a list of samples
for (sample in samplesMcap) {
sample <- samples[,-c(5:12)] #Remove extraneous columns
colnames(sample) <- c("chr", "start", "stop", "percentMeth", "geneID") #Modify column names
}
for (sample in samplesMcap) {
sample <- sample[,-c(5:12)] #Remove extraneous columns
colnames(sample) <- c("chr", "start", "stop", "percentMeth", "geneID") #Modify column names
}
for (sample in samplesMcap) {
sample <- sample[[,-c(5:12)]] #Remove extraneous columns
names(sample) <- c("chr", "start", "stop", "percentMeth", "geneID") #Modify column names
}
length(samplesMcap)
head(samplesMcap)
head(samplesMcap)[[1]]
head(samplesMcap)[[1]][1]
head(samplesMcap)[[1]][,1]
head(samplesMcap)[1]
head(samplesMcap)[1][1]
head(samplesMcap)[[1]]
samplesMcap <- list(Meth10,
Meth11,
Meth12,
Meth13,
Meth14,
Meth15,
Meth16,
Meth17,
Meth18) #Create a list of samples
length(samplesMcap)
head(samplesMcap)[1]
head(samplesMcap)[1][1]
head(samplesMcap)[[1]]
head(samplesMcap)[[1]][,1]
for (i in 1:length(samplesMcap)) {
sample <- samplesMcap[[i]][,-c(5:12)] #Remove extraneous columns
colnames(sample) <- c("chr", "start", "stop", "percentMeth", "geneID") #Modify column names
}
head(Meth17) #Confirm formatting
samplesMcap <- lapply(samplesMcap, function(sample) {
sample <- sample[,-c(5:12)]
colnames(sample) <- c("chr", "start", "stop", "percentMeth", "geneID")
x
})
samplesMcap <- lapply(samplesMcap, function(sample) {
sample <- sample[,-c(5:12)]
colnames(sample) <- c("chr", "start", "stop", "percentMeth", "geneID")
sample
})
View(sample)
View(samplesMcap)
View(samplesMcap)
samplesMcap[[1]]
Meth10 <- Meth10[,-c(5:12)] #Remove extraneous columns
colnames(Meth10) <- c("chr", "start", "stop", "percentMeth", "geneID") #Modify column names
head(Meth10) #Confirm column naming
Meth11 <- Meth11[,-c(5:12)] #Remove extraneous columns
colnames(Meth11) <- c("chr", "start", "stop", "percentMeth", "geneID") #Modify column names
head(Meth11) #Confirm column naming
Meth12 <- Meth12[,-c(5:12)] #Remove extraneous columns
colnames(Meth12) <- c("chr", "start", "stop", "percentMeth", "geneID") #Modify column names
head(Meth12) #Confirm column naming
Meth13 <- Meth13[,-c(5:12)] #Remove extraneous columns
colnames(Meth13) <- c("chr", "start", "stop", "percentMeth", "geneID") #Modify column names
head(Meth13) #Confirm column naming
samplesMcap <- list(Meth10,
Meth11,
Meth12,
Meth13,
Meth14,
Meth15,
Meth16,
Meth17,
Meth18) #Create a list of samples
setwd("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Median-Methylation-Calculations") #Set working directory within the notebook chunk for list.files to find the necessary files
filesToImport <- list.files(pattern = "*geneID") #Create a file list for all 9 files to import. Only import overlaps for full samples (not divided by methylation status)
list2env(lapply(setNames(filesToImport,
make.names(gsub("_R1_001_val_1_bismark_bt2_pe._5x.bedgraph.bed-mcGenes-geneID", "", filesToImport))),
read.delim, header = FALSE),
envir = .GlobalEnv) #Import files to the .GlobalEnv with list2env. Use lapply to setNames of the files by taking all the common parts of their names out. Read files with read.delim and include header = FALSE. Files will be named Meth#
head(Meth10) #Confirm import
samplesMcap <- list(Meth10,
Meth11,
Meth12,
Meth13,
Meth14,
Meth15,
Meth16,
Meth17,
Meth18) #Create a list of samples
samplesMcap <- c("Meth10",
"Meth11",
"Meth12",
"Meth13",
"Meth14",
"Meth15",
"Meth16",
"Meth17",
"Meth18") #Create a vector of sample names
for(sample in samplesMcap) { #For each sample listed in samplesMcap
sample.tmp <- get(sample) #Extract sample based on vector contents
sample.tmp <- sample.tmp[,-c(5:12)] #Remove extraneous columns
colnames(sample.tmp) <- c("chr", "start", "stop", "percentMeth", "geneID") #Rename columns
assign(sample, sample.tmp) #Replace sample with edited sample.tmp contents
}
head(Meth17)
percentMeth10 <-
head(percentMeth10) #Confirm percent methylation calculation
View(percentMeth10)
for(sample in samplesMcap) { #For each sample listed in samplesMcap
sample.tmp <- get(sample) #Extract sample based on vector contents
sample.tmp <- aggregate(percentMeth ~ geneID, data = sample.tmp, FUN = median) #Use aggregate to group geneID and calculate median percent methylation
assign(sample, sample.tmp) #Replace sample with edited sample.tmp contents
}
head(Meth17) #Confirm median methylation calculation
for (sample in samplesMcap) { #For each sample listed in samplesMcap
sample.tmp <- get(sample) #Extract sample based on vector contents
fileName <- paste("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Median-Methylation-Calculations/", sample.tmp, "-Median-Methylation", ".txt", sep = "") #Assign filename for each sample
write.table(as.data.frame(sample.tmp), file = fileName, sep = "\t", row.names = FALSE, col.names = TRUE) #Write out files into the Median-Methylation-Calculations subdirectory
}
for (sample in samplesMcap) { #For each sample listed in samplesMcap
sample.tmp <- get(sample) #Extract sample based on vector contents
fileName <- paste(sample.tmp, "-Median-Methylation", ".txt", sep = "") #Assign filename for each sample
write.table(as.data.frame(sample.tmp), file = fileName, sep = "\t", row.names = FALSE, col.names = TRUE) #Write out files into the Median-Methylation-Calculations subdirectory
}
fileName
View(sample.tmp)
for (sample in 1:length(samplesMcap)) { #For each sample listed in samplesMcap
sample.tmp <- get(samplesMcap[i]) #Extract sample based on vector contents
fileName <- paste(samplesMcap[i], "-Median-Methylation", ".txt", sep = "") #Assign filename for each sample
write.table(as.data.frame(sample.tmp), file = fileName, sep = "\t", row.names = FALSE, col.names = TRUE) #Write out files into the Median-Methylation-Calculations subdirectory
}
getwd()
for (sample in 1:length(samplesMcap)) { #For each sample listed in samplesMcap
sample.tmp <- get(samplesMcap[i]) #Extract sample based on vector contents
fileName <- paste("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Median-Methylation-Calculations", samplesMcap[i], "-Median-Methylation", ".txt", sep = "") #Assign filename for each sample
write.table(as.data.frame(sample.tmp), file = fileName, sep = "\t", row.names = FALSE, col.names = TRUE) #Write out files into the Median-Methylation-Calculations subdirectory
}
for (sample in 1:length(samplesMcap)) { #For each sample listed in samplesMcap
sample.tmp <- get(samplesMcap[i]) #Extract sample based on vector contents
fileName <- paste("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Median-Methylation-Calculations/", samplesMcap[i], "-Median-Methylation", ".txt", sep = "") #Assign filename for each sample
write.table(sample.tmp, file = fileName, sep = "\t", row.names = FALSE, col.names = TRUE) #Write out files into the Median-Methylation-Calculations subdirectory
}
samplesMcap[i]
for (i in 1:length(samplesMcap)) { #For each sample listed in samplesMcap
sample <- get(samplesMcap[i]) #Extract sample based on vector contents
fileName <- paste("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Median-Methylation-Calculations/", samplesMcap[i], "-Median-Methylation", ".txt", sep = "") #Assign filename for each sample
write.table(sample, file = fileName, sep = "\t", row.names = FALSE, col.names = TRUE) #Write out files into the Median-Methylation-Calculations subdirectory
}
setwd("../analyses/Characterizing-CpG-Methylation-5x/Pact/Median-Methylation-Calculations") #Set working directory within the notebook chunk for list.files to find the necessary files
filesToImport <- list.files(pattern = "*geneID") #Create a file list for all 9 files to import. Only import overlaps for full samples (not divided by methylation status)
list2env(lapply(setNames(filesToImport,
make.names(gsub("_R1_001_val_1_bismark_bt2_pe._5x.bedgraph.bed-paGenes-geneID", "", filesToImport))),
read.delim, header = FALSE),
envir = .GlobalEnv) #Import files to the .GlobalEnv with list2env. Use lapply to setNames of the files by taking all the common parts of their names out. Read files with read.delim and include header = FALSE. Files will be named Meth#
head(Meth1) #Confirm import
for(sample in samplesPact) { #For each sample listed in samplesPact
sample.tmp <- get(sample) #Extract sample based on vector contents
sample.tmp <- sample.tmp[,-c(5:12)] #Remove extraneous columns
colnames(sample.tmp) <- c("chr", "start", "stop", "percentMeth", "geneID") #Rename columns
assign(sample, sample.tmp) #Replace sample with edited sample.tmp contents
}
samplesPact <- c("Meth1",
"Meth2",
"Meth3",
"Meth4",
"Meth5",
"Meth6",
"Meth7",
"Meth8",
"Meth9") #Create a vector of sample names
for(sample in samplesPact) { #For each sample listed in samplesPact
sample.tmp <- get(sample) #Extract sample based on vector contents
sample.tmp <- sample.tmp[,-c(5:12)] #Remove extraneous columns
colnames(sample.tmp) <- c("chr", "start", "stop", "percentMeth", "geneID") #Rename columns
assign(sample, sample.tmp) #Replace sample with edited sample.tmp contents
}
head(Meth7) #Confirm formatting changes
for(sample in samplesPact) { #For each sample listed in samplesPact
sample.tmp <- get(sample) #Extract sample based on vector contents
sample.tmp <- aggregate(percentMeth ~ geneID, data = sample.tmp, FUN = median) #Use aggregate to group geneID and calculate median percent methylation
assign(sample, sample.tmp) #Replace sample with edited sample.tmp contents
}
head(Meth7) #Confirm median methylation calculation
for (i in 1:length(samplesPact)) { #For each sample listed in samplesPact
sample <- get(samplesPact[i]) #Extract sample based on vector contents
fileName <- paste("../analyses/Characterizing-CpG-Methylation-5x/Pact/Median-Methylation-Calculations/", samplesPact[i], "-Median-Methylation", ".txt", sep = "") #Assign filename for each sample
write.table(sample, file = fileName, sep = "\t", row.names = FALSE, col.names = TRUE) #Write out files into the Median-Methylation-Calculations subdirectory
}
