McapCpGTypeWGMB <- rbind(McapCpGTypeWGMB, ctResults) #Add test statistics to master table
}
McapCpGTypeWGMB$p.adj <- p.adjust(McapCpGTypeWGMB$p.value, method = "fdr") #Correct p-value using FDR
McapCpGTypeWGMB$comparison <- rep("WGBS vs. MBDBS", times = 3) #Add methods compared
head(McapCpGTypeWGMB) #Confirm changes
McapCpGTypeRRMB <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(McapCpGTypeStatTest)) { #For each CpG type
Method1CpG <- McapCpGTypeStatTest[2,i] #Variable for # CpG type for method 1
Method2CpG <- McapCpGTypeStatTest[3,i] #Variable for # CpG type for method 2
Method1NotCpG <- sum(McapCpGTypeStatTest[2,-i]) #Variable for # other CpG types for method 1
Method2NotCpG <- sum(McapCpGTypeStatTest[3,-i]) #Variable for # other CpG types for method 2
ct <- matrix(c(Method1CpG,Method2CpG,Method1NotCpG,Method2NotCpG), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(McapCpGTypeStatTest[i])), paste0("Not", colnames(McapCpGTypeStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(McapCpGTypeStatTest)[c(2,3)])) #Assign row names: method 1, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$CpGType <- as.character(colnames(McapCpGTypeStatTest)[i]) #Add CpG type to results
McapCpGTypeRRMB <- rbind(McapCpGTypeRRMB, ctResults) #Add test statistics to master table
}
McapCpGTypeRRMB$p.adj <- p.adjust(McapCpGTypeRRMB$p.value, method = "fdr") #Correct p-value using FDR
McapCpGTypeRRMB$comparison <- rep("RRBS vs. MBDBS", times = 3) #Add methods compared
head(McapCpGTypeRRMB) #Confirm changes
McapCpGTypeStatResults <- rbind(McapCpGTypeWGRR,
McapCpGTypeWGMB,
McapCpGTypeRRMB) #Combine tables
tail(McapCpGTypeStatResults) #Confirm changes
write.table(McapCpGTypeStatResults, "../analyses/Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union-CpG-Type-StatResults.txt", quote = FALSE, row.names = FALSE) #Save table
McapCpGTypePercents <- McapCpGType[,c(3,5,7)] #Keep only percent information
head(McapCpGTypePercents) #Confirm changes
plotColors <- c(rev(RColorBrewer::brewer.pal(3, "Greens")),
rev(RColorBrewer::brewer.pal(3, "Blues")),
rev(RColorBrewer::brewer.pal(3, "Reds"))) #Create vector of WGBS, RRBS, and MBD colors
barplot(t(McapCpGTypePercents), col = dichromat(c(rev(RColorBrewer::brewer.pal(3, "Greens"))))) #Check greens
barplot(t(McapCpGTypePercents), col = dichromat(c(rev(RColorBrewer::brewer.pal(3, "Blues"))))) #Check blues
barplot(t(McapCpGTypePercents), col = dichromat(c(rev(RColorBrewer::brewer.pal(3, "Reds"))))) #Check reds
pdf("../Output/Mcap_union-CpG-Type.pdf", height = 8.5, width = 11)
par(mar = c(2,5,0,1), oma = c(1, 1, 0, 12)) #Change figure boundaries
barplot(t(McapCpGTypePercents),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 1.5,
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:ncol(t(McapCpGTypePercents))){
xx <- t(McapCpGTypePercents)
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors[(3*i)-2], plotColors[(3*i)-1], plotColors[(3*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE) #Create new plot
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n") #Add new plot on top of current plot
legend(x = 0.54, y = 0.87,
xpd = TRUE,
legend = c(expression("High (">="50%)"), "Moderate (10-50%)", expression("Low ("<="10%)")),
pch = 22,
col = "black",
pt.bg = c("grey20", "grey50", "grey80"),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
text("Methylation Status", x = 0.77, y = 0.879, cex = 1.5) #Add legend title that is aligned with legend
dev.off() #Turn off plotting device
PactAll <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-averages-counts.txt", header = FALSE, col.names = c("totalLines", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactAll <- PactAll[-4,] #Remove last row (total lines for all files)
tail(PactAll) #Confirm import
PactMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-Meth-counts.txt", header = FALSE, col.names = c("Meth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactMeth <- PactMeth[-4,] #Remove last row (total lines for all files)
tail(PactMeth) #Confirm import
PactSparseMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-sparseMeth-counts.txt", header = FALSE, col.names = c("sparseMeth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactSparseMeth <- PactSparseMeth[-4,] #Remove last row (total lines for all files)
tail(PactSparseMeth) #Confirm import
PactUnMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-unMeth-counts.txt", header = FALSE, col.names = c("unMeth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactUnMeth <- PactUnMeth[-4,] #Remove last row (total lines for all files)
tail(PactUnMeth) #Confirm import
PactCpGType <- cbind(PactAll, PactMeth, PactSparseMeth, PactUnMeth) #Mash tables together by column
PactCpGType <- PactCpGType[,-c(2,4,6,8)] #Remove filename columns
rownames(PactCpGType) <- c("MBDBS", "RRBS", "WGBS") #Add rownames
PactCpGType <- PactCpGType[c(3,2,1),] #Order rows: WGBS, RRBS, MBDBS
tail(PactCpGType) #Confirm table mashing
PactCpGType$percentMeth <- (PactCpGType$Meth / PactCpGType$totalLines) * 100 #Calculate percent methylated loci
PactCpGType$percentSparseMeth <- (PactCpGType$sparseMeth / PactCpGType$totalLines) * 100 #Calculate percent sparsely methylated loci
PactCpGType$percentUnMeth <- (PactCpGType$unMeth / PactCpGType$totalLines) * 100 #Calculate percent unmethylated loci
PactCpGType <- PactCpGType[,c(1, 2, 5, 3, 6, 4, 7)] #Reorganize columns
tail(PactCpGType) #Confirm calculations
write.table(PactCpGType, "../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-CpG-Type.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save summary table
PactCpGTypeStatTest <- PactCpGType[,c(2,4,6)] #Separate out count data for statistical testing
head(PactCpGTypeStatTest) #Confirm changes
PactCpGTypeWGRR <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(PactCpGTypeStatTest)) { #For each CpG type
Method1CpG <- PactCpGTypeStatTest[1,i] #Variable for # CpG type for method 1
Method2CpG <- PactCpGTypeStatTest[2,i] #Variable for # CpG type for method 2
Method1NotCpG <- sum(PactCpGTypeStatTest[1,-i]) #Variable for # other CpG types for method 1
Method2NotCpG <- sum(PactCpGTypeStatTest[2,-i]) #Variable for # other CpG types for method 2
ct <- matrix(c(Method1CpG,Method2CpG,Method1NotCpG,Method2NotCpG), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(PactCpGTypeStatTest[i])), paste0("Not", colnames(PactCpGTypeStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(PactCpGTypeStatTest)[1:2])) #Assign row names: method 1, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$CpGType <- as.character(colnames(PactCpGTypeStatTest)[i]) #Add CpG type to results
PactCpGTypeWGRR <- rbind(PactCpGTypeWGRR, ctResults) #Add test statistics to master table
}
PactCpGTypeWGRR$p.adj <- p.adjust(PactCpGTypeWGRR$p.value, method = "fdr") #Correct p-value using FDR
PactCpGTypeWGRR$comparison <- rep("WGBS vs. RRBS", times = 3) #Add methods compared
head(PactCpGTypeWGRR) #Confirm changes
PactCpGTypeWGMB <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(PactCpGTypeStatTest)) { #For each CpG type
Method1CpG <- PactCpGTypeStatTest[1,i] #Variable for # CpG type for method 1
Method2CpG <- PactCpGTypeStatTest[3,i] #Variable for # CpG type for method 2
Method1NotCpG <- sum(PactCpGTypeStatTest[1,-i]) #Variable for # other CpG types for method 1
Method2NotCpG <- sum(PactCpGTypeStatTest[3,-i]) #Variable for # other CpG types for method 2
ct <- matrix(c(Method1CpG,Method2CpG,Method1NotCpG,Method2NotCpG), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(PactCpGTypeStatTest[i])), paste0("Not", colnames(PactCpGTypeStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(PactCpGTypeStatTest)[c(1,3)])) #Assign row names: method 1, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$CpGType <- as.character(colnames(PactCpGTypeStatTest)[i]) #Add CpG type to results
PactCpGTypeWGMB <- rbind(PactCpGTypeWGMB, ctResults) #Add test statistics to master table
}
PactCpGTypeWGMB$p.adj <- p.adjust(PactCpGTypeWGMB$p.value, method = "fdr") #Correct p-value using FDR
PactCpGTypeWGMB$comparison <- rep("WGBS vs. MBDBS", times = 3) #Add methods compared
head(PactCpGTypeWGMB) #Confirm changes
PactCpGTypeRRMB <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(PactCpGTypeStatTest)) { #For each CpG type
Method1CpG <- PactCpGTypeStatTest[2,i] #Variable for # CpG type for method 1
Method2CpG <- PactCpGTypeStatTest[3,i] #Variable for # CpG type for method 2
Method1NotCpG <- sum(PactCpGTypeStatTest[2,-i]) #Variable for # other CpG types for method 1
Method2NotCpG <- sum(PactCpGTypeStatTest[3,-i]) #Variable for # other CpG types for method 2
ct <- matrix(c(Method1CpG,Method2CpG,Method1NotCpG,Method2NotCpG), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(PactCpGTypeStatTest[i])), paste0("Not", colnames(PactCpGTypeStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(PactCpGTypeStatTest)[c(2,3)])) #Assign row names: method 1, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$CpGType <- as.character(colnames(PactCpGTypeStatTest)[i]) #Add CpG type to results
PactCpGTypeRRMB <- rbind(PactCpGTypeRRMB, ctResults) #Add test statistics to master table
}
PactCpGTypeRRMB$p.adj <- p.adjust(PactCpGTypeRRMB$p.value, method = "fdr") #Correct p-value using FDR
PactCpGTypeRRMB$comparison <- rep("RRBS vs. MBDBS", times = 3) #Add methods compared
head(PactCpGTypeRRMB) #Confirm changes
PactCpGTypeStatResults <- rbind(PactCpGTypeWGRR,
PactCpGTypeWGMB,
PactCpGTypeRRMB) #Combine tables
tail(PactCpGTypeStatResults) #Confirm changes
write.table(PactCpGTypeStatResults, "../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union-CpG-Type-StatResults.txt", quote = FALSE, row.names = FALSE) #Save table
PactCpGTypePercents <- PactCpGType[,c(3,5,7)] #Keep only percent information
head(PactCpGTypePercents) #Confirm changes
pdf("../Output/Pact_union-CpG-Type.pdf", height = 8.5, width = 11)
par(mar = c(2,5,0,1), oma = c(1, 1, 0, 12)) #Change figure boundaries
barplot(t(PactCpGTypePercents),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 1.5,
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:ncol(t(PactCpGTypePercents))){
xx <- t(PactCpGTypePercents)
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors[(3*i)-2], plotColors[(3*i)-1], plotColors[(3*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE) #Create new plot
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n") #Add new plot on top of current plot
legend(x = 0.54, y = 0.87,
xpd = TRUE,
legend = c(expression("High (">="50%)"), "Moderate (10-50%)", expression("Low ("<="10%)")),
pch = 22,
col = "black",
pt.bg = c("grey20", "grey50", "grey80"),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
text("Methylation Status", x = 0.77, y = 0.879, cex = 1.5) #Add legend title that is aligned with legend
dev.off() #Turn off plotting device
knitr::opts_chunk$set(echo = TRUE)
#install.packages("RColorBrewer")
require(RColorBrewer) #Load RColorBrewer
#install.packages("dichromat")
require(dichromat)
sessionInfo()
McapAll <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-5x-bedgraph-counts.txt", header = FALSE, col.names = c("totalLines", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
McapAll <- McapAll[-10,] #Remove last row (total lines for all files)
tail(McapAll) #Confirm import
McapMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-5x-Meth-counts.txt", header = FALSE, col.names = c("Meth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
McapMeth <- McapMeth[-10,] #Remove last row (total lines for all files)
tail(McapMeth) #Confirm import
McapSparseMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-5x-sparseMeth-counts.txt", header = FALSE, col.names = c("sparseMeth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
McapSparseMeth <- McapSparseMeth[-10,] #Remove last row (total lines for all files)
tail(McapSparseMeth) #Confirm import
McapUnMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-5x-unMeth-counts.txt", header = FALSE, col.names = c("unMeth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
McapUnMeth <- McapUnMeth[-10,] #Remove last row (total lines for all files)
tail(McapUnMeth) #Confirm import
McapCpGType <- cbind(McapAll, McapMeth, McapSparseMeth, McapUnMeth) #Mash tables together by column
rownames(McapCpGType) <- substr(McapAll$filename, start = 1, stop = 6) #Use the first 6 characters of the filename to add sample ID as row names
McapCpGType <- McapCpGType[,-c(2,4,6,8)] #Remove filename columns
tail(McapCpGType) #Confirm table mashing
McapCpGType$percentMeth <- (McapCpGType$Meth / McapCpGType$totalLines) * 100 #Calculate percent methylated loci
McapCpGType$percentSparseMeth <- (McapCpGType$sparseMeth / McapCpGType$totalLines) * 100 #Calculate percent sparsely methylated loci
McapCpGType$percentUnMeth <- (McapCpGType$unMeth / McapCpGType$totalLines) * 100 #Calculate percent unmethylated loci
McapCpGType <- McapCpGType[,c(1, 2, 5, 3, 6, 4, 7)] #Reorganize columns
tail(McapCpGType) #Confirm calculations
write.table(McapCpGType, "../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-CpG-Type.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save summary table
McapCpGTypePercents <- McapCpGType[,c(3,5,7)] #Keep only columns with % total CpG information
head(McapCpGTypePercents) #Check reorganization
#Create test plots
barplot(t(McapCpGTypePercents[1,]), beside = TRUE, ylim = c(0,100), names.arg = c(expression("High (">="50%)"), "Moderate (10-50%)", expression("Weak ("<="10%)")), axes = FALSE) #Sample 1, WGBS
axis(side = 2, at = seq(0, 100, by = 25), las = 2, col = "grey80")
barplot(t(McapCpGTypePercents[4,]), beside = TRUE, ylim = c(0,100), names.arg = c(expression("High (">="50%)"), "Moderate (10-50%)", expression("Weak ("<="10%)")), axes = FALSE) #Sample 1, RRBS
axis(side = 2, at = seq(0, 100, by = 25), las = 2, col = "grey80")
barplot(t(McapCpGTypePercents[7,]), beside = TRUE, ylim = c(0,100), names.arg = c(expression("High (">="50%)"), "Moderate (10-50%)", expression("Weak ("<="10%)")), axes = FALSE) #Sample 1, MBD-BSSeq
axis(side = 2, at = seq(0, 100, by = 25), las = 2, col = "grey80")
#pdf("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-CpG-Type.pdf", height = 8.5, width = 11) #Save file as pdf
par(mfcol = c(3,3), mar = c(2, 2, 2, 0), oma = c(5, 5, 2, 0)) #Fill in multipanel plot by column and adjust inner and outer margins
barplot(t(McapCpGTypePercents[1,]), beside = TRUE, ylim = c(0,100), names.arg = FALSE, axes = FALSE) #Sample 1, WGBS
axis(side = 2, at = seq(0, 100, by = 25), las = 2, col = "grey80", cex.axis = 1.3) #Add y-axis
mtext(side = 3, "WBGS", adj = 0, line = 1) #Add sequencing information
barplot(t(McapCpGTypePercents[4,]), beside = TRUE, ylim = c(0,100), names.arg = FALSE, axes = FALSE) #Sample 1, RRBS
mtext(side = 3, "RRBS", adj = 0, line = 1) #Add sequencing information
axis(side = 2, at = seq(0, 100, by = 25), las = 2, col = "grey80", cex.axis = 1.3) #Add y-axis
mtext(side = 2, outer = TRUE, "% 5x CpG with Data", cex = 1.5, line = 2) #Add y-axis label
barplot(t(McapCpGTypePercents[7,]), beside = TRUE, ylim = c(0,100), names.arg = c(expression("">= "50%"), "10-50%", "< 10%"), cex.names = 1.3, axes = FALSE) #Sample 1, MBD-BSSeq
mtext(side = 3, "MBD-BSSeq", adj = 0, line = 1) #Add sequencing information
axis(side = 2, at = seq(0, 100, by = 25), las = 2, col = "grey80", cex.axis = 1.3) #Add y-axis
barplot(t(McapCpGTypePercents[2,]), beside = TRUE, ylim = c(0,100), names.arg = FALSE, axes = FALSE) #Sample 2, WGBS
barplot(t(McapCpGTypePercents[5,]), beside = TRUE, ylim = c(0,100), names.arg = FALSE, axes = FALSE) #Sample 2, RRBS
barplot(t(McapCpGTypePercents[8,]), beside = TRUE, ylim = c(0,100), names.arg = c(expression("">= "50%"), "10-50%", "< 10%"), cex.names = 1.3, axes = FALSE) #Sample 2, MBD-BSSeq
mtext(side = 1, outer = TRUE, "% Methylation", cex = 1.5, line = 2) #Add x-axis label
barplot(t(McapCpGTypePercents[3,]), beside = TRUE, ylim = c(0,100), names.arg = FALSE, axes = FALSE) #Sample 3, WGBS
barplot(t(McapCpGTypePercents[6,]), beside = TRUE, ylim = c(0,100), names.arg = FALSE, axes = FALSE) #Sample 3, RRBS
barplot(t(McapCpGTypePercents[9,]), beside = TRUE, ylim = c(0,100), names.arg = c(expression("">= "50%"), "10-50%", "< 10%"), cex.names = 1.3, axes = FALSE) #Sample 3, MBD-BSSeq
#dev.off() #Turn off plotting device
PactAll <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-5x-bedgraph-counts.txt", header = FALSE, col.names = c("totalLines", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactAll <- PactAll[-10,] #Remove last row (total lines for all files)
tail(PactAll) #Confirm import
PactMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-5x-Meth-counts.txt", header = FALSE, col.names = c("Meth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactMeth <- PactMeth[-10,] #Remove last row (total lines for all files)
tail(PactMeth) #Confirm import
PactSparseMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-5x-sparseMeth-counts.txt", header = FALSE, col.names = c("sparseMeth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactSparseMeth <- PactSparseMeth[-10,] #Remove last row (total lines for all files)
tail(PactSparseMeth) #Confirm import
PactUnMeth <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-5x-unMeth-counts.txt", header = FALSE, col.names = c("unMeth", "filename")) #Import file using space as a delimiter. Columns are the number of lines and the filename
PactUnMeth <- PactUnMeth[-10,] #Remove last row (total lines for all files)
tail(PactUnMeth) #Confirm import
PactCpGType <- cbind(PactAll, PactMeth, PactSparseMeth, PactUnMeth) #Mash tables together by column
rownames(PactCpGType) <- substr(PactAll$filename, start = 1, stop = 5) #Use the first 5 characters of the filename to add sample ID to row names
PactCpGType <- PactCpGType[,-c(2,4,6,8)] #Remove filename columns
tail(PactCpGType) #Confirm table mashing
PactCpGType$percentMeth <- (PactCpGType$Meth / PactCpGType$totalLines) * 100 #Calculate percent methylated loci
PactCpGType$percentSparseMeth <- (PactCpGType$sparseMeth / PactCpGType$totalLines) * 100 #Calculate percent sparsely methylated loci
PactCpGType$percentUnMeth <- (PactCpGType$unMeth / PactCpGType$totalLines) * 100 #Calculate percent unmethylated loci
PactCpGType <- PactCpGType[,c(1, 2, 5, 3, 6, 4, 7)] #Reorganize columns
tail(PactCpGType) #Confirm calculations
write.table(PactCpGType, "../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-CpG-Type.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save summary table
PactCpGType <- read.delim("../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-CpG-Type.txt", sep = "\t", header = TRUE) #Import summary table
head(PactCpGType) #Check import
PactCpGTypePercents <- PactCpGType[,c(3,5,7)] #Keep only columns with % total CpG information
tail(PactCpGTypePercents) #Check reorganization
#Create test plots
barplot(t(PactCpGTypePercents[1,]), beside = TRUE, ylim = c(0,100), names.arg = c(expression("High (">="50%)"), "Moderate (10-50%)", expression("Weak ("<="10%)")), axes = FALSE) #Sample 1, WGBS
axis(side = 2, at = seq(0, 100, by = 25), las = 2, col = "grey80")
barplot(t(PactCpGTypePercents[4,]), beside = TRUE, ylim = c(0,100), names.arg = c(expression("High (">="50%)"), "Moderate (10-50%)", expression("Weak ("<="10%)")), axes = FALSE) #Sample 1, RRBS
axis(side = 2, at = seq(0, 100, by = 25), las = 2, col = "grey80")
barplot(t(PactCpGTypePercents[7,]), beside = TRUE, ylim = c(0,100), names.arg = c(expression("High (">="50%)"), "Moderate (10-50%)", expression("Weak ("<="10%)")), axes = FALSE) #Sample 1, MBD-BSSeqc(expression("High (">="50%)"), "Moderate (10-50%)", expression("Weak ("<="10%)"))
axis(side = 2, at = seq(0, 100, by = 25), las = 2, col = "grey80")
#pdf("../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-CpG-Type.pdf", height = 8.5, width = 11) #Save file as pdf
par(mfcol = c(3,3), mar = c(2, 2, 2, 0), oma = c(5, 5, 2, 0)) #Fill in multipanel plot by column and adjust inner and outer margins
barplot(t(PactCpGTypePercents[1,]), beside = TRUE, ylim = c(0,100), names.arg = FALSE, axes = FALSE) #Sample 1, WGBS
mtext(side = 3, "WBGS", adj = 0, line = 1) #Add sequencing information
axis(side = 2, at = seq(0, 100, by = 25), las = 2, col = "grey80", cex.axis = 1.3) #Add y-axis
barplot(t(PactCpGTypePercents[4,]), beside = TRUE, ylim = c(0,100), names.arg = FALSE, axes = FALSE) #Sample 1, RRBS
mtext(side = 3, "RRBS", adj = 0, line = 1) #Add sequencing information
axis(side = 2, at = seq(0, 100, by = 25), las = 2, col = "grey80", cex.axis = 1.3) #Add y-axis
mtext(side = 2, outer = TRUE, "% 5x CpG with Data", cex = 1.5, line = 2) #Add y-axis label
barplot(t(PactCpGTypePercents[7,]), beside = TRUE, ylim = c(0,100), names.arg = c(expression("">= "50%"), "10-50%", "< 10%"), cex.names = 1.3, axes = FALSE) #Sample 1, MBD-BSSeq
mtext(side = 3, "MBD-BSSeq", adj = 0, line = 1) #Add sequencing information
axis(side = 2, at = seq(0, 100, by = 25), las = 2, col = "grey80", cex.axis = 1.3) #Add y-axis
barplot(t(PactCpGTypePercents[2,]), beside = TRUE, ylim = c(0,100), names.arg = FALSE, axes = FALSE) #Sample 2, WGBS
barplot(t(PactCpGTypePercents[5,]), beside = TRUE, ylim = c(0,100), names.arg = FALSE, axes = FALSE) #Sample 2, RRBS
barplot(t(PactCpGTypePercents[8,]), beside = TRUE, ylim = c(0,100), names.arg = c(expression("">= "50%"), "10-50%", "< 10%"), cex.names = 1.3, axes = FALSE) #Sample 2, MBD-BSSeq
mtext(side = 1, outer = TRUE, "% Methylation", cex = 1.5, line = 2) #Add x-axis label
barplot(t(PactCpGTypePercents[3,]), beside = TRUE, ylim = c(0,100), names.arg = FALSE, axes = FALSE) #Sample 3, WGBS
barplot(t(PactCpGTypePercents[6,]), beside = TRUE, ylim = c(0,100), names.arg = FALSE, axes = FALSE) #Sample 3, RRBS
barplot(t(PactCpGTypePercents[9,]), beside = TRUE, ylim = c(0,100), names.arg = c(expression("">= "50%"), "10-50%", "< 10%"), cex.names = 1.3, axes = FALSE) #Sample 3, MBD-BSSeq
#dev.off() #Turn off plotting device
McapGenomeFeatures <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-CGMotif-Overlaps-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with CG motif and feature track overlaps
McapGenomeFeatures <- McapGenomeFeatures[-8,] #Remove final row
tail(McapGenomeFeatures) #Check import
McapGeneOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-5x-mcGenes-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-gene overlaps
McapGeneOverlaps <- McapGeneOverlaps[-37,] #Remove final row
tail(McapGeneOverlaps) #Confirm import
McapCDSOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-5x-mcCDS-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-CDS overlaps
McapCDSOverlaps <- McapCDSOverlaps[-37,] #Remove final row
tail(McapCDSOverlaps) #Confirm import
McapIntronsOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-5x-mcIntrons-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
McapIntronsOverlaps <- McapIntronsOverlaps[-37,] #Remove final row
tail(McapIntronsOverlaps) #Confirm import
McapFlanksOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-5x-mcFlanks-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-flank overlaps
McapFlanksOverlaps <- McapFlanksOverlaps[-37,] #Remove final row
tail(McapFlanksOverlaps) #Confirm import
McapFlanksUpstreamOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-5x-mcFlanksUpstream-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-upstream flank overlaps
McapFlanksUpstreamOverlaps <- McapFlanksUpstreamOverlaps[-37,] #Remove final row
tail(McapFlanksUpstreamOverlaps) #Confirm import
McapFlanksDownstreamOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-5x-mcFlanksDownstream-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
McapFlanksUpstreamOverlaps <- McapFlanksUpstreamOverlaps[-37,] #Remove final row
tail(McapFlanksUpstreamOverlaps) #Confirm import
McapFlanksDownstreamOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-5x-mcFlanksDownstream-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
McapFlanksUpstreamOverlaps <- McapFlanksUpstreamOverlaps[-37,] #Remove final row
tail(McapFlankDownstreamOverlaps) #Confirm import
McapFlanksDownstreamOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-5x-mcFlanksDownstream-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
McapFlanksUpstreamOverlaps <- McapFlanksUpstreamOverlaps[-37,] #Remove final row
tail(McapFlanksDownstreamOverlaps) #Confirm import
McapIntergenicOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap-5x-mcIntergenic-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Intergenic overlaps
McapIntergenicOverlaps <- McapIntergenicOverlaps[-37,] #Remove final row
tail(McapIntergenicOverlaps) #Confirm import
McapFeatureOverlaps <- data.frame("allCpGs" = rep(0, times = 7),
"Meth10Meth" = rep(0, times = 7),
"Meth10sparseMeth" = rep(0, times = 7),
"Meth10unMeth" = rep(0, times = 7),
"Meth10" = rep(0, times = 7),
"Meth11Meth" = rep(0, times = 7),
"Meth11sparseMeth" = rep(0, times = 7),
"Meth11unMeth" = rep(0, times = 7),
"Meth11" = rep(0, times = 7),
"Meth12Meth" = rep(0, times = 7),
"Meth12sparseMeth" = rep(0, times = 7),
"Meth12unMeth" = rep(0, times = 7),
"Meth12" = rep(0, times = 7),
"Meth13Meth" = rep(0, times = 7),
"Meth13sparseMeth" = rep(0, times = 7),
"Meth13unMeth" = rep(0, times = 7),
"Meth13" = rep(0, times = 7),
"Meth14Meth" = rep(0, times = 7),
"Meth14sparseMeth" = rep(0, times = 7),
"Meth14unMeth" = rep(0, times = 7),
"Meth14" = rep(0, times = 7),
"Meth15Meth" = rep(0, times = 7),
"Meth15sparseMeth" = rep(0, times = 7),
"Meth15unMeth" = rep(0, times = 7),
"Meth15" = rep(0, times = 7),
"Meth16Meth" = rep(0, times = 7),
"Meth16sparseMeth" = rep(0, times = 7),
"Meth16unMeth" = rep(0, times = 7),
"Meth16" = rep(0, times = 7),
"Meth17Meth" = rep(0, times = 7),
"Meth17sparseMeth" = rep(0, times = 7),
"Meth17unMeth" = rep(0, times = 7),
"Meth17" = rep(0, times = 7),
"Meth18Meth" = rep(0, times = 7),
"Meth18sparseMeth" = rep(0, times = 7),
"Meth18unMeth" = rep(0, times = 7),
"Meth18" = rep(0, times = 7),) #Create blank dataframe with information for various CpG categories and methylation status. Match columns to the order of columns in the overlap count files
McapFeatureOverlaps <- data.frame("allCpGs" = rep(0, times = 7),
"Meth10Meth" = rep(0, times = 7),
"Meth10sparseMeth" = rep(0, times = 7),
"Meth10unMeth" = rep(0, times = 7),
"Meth10" = rep(0, times = 7),
"Meth11Meth" = rep(0, times = 7),
"Meth11sparseMeth" = rep(0, times = 7),
"Meth11unMeth" = rep(0, times = 7),
"Meth11" = rep(0, times = 7),
"Meth12Meth" = rep(0, times = 7),
"Meth12sparseMeth" = rep(0, times = 7),
"Meth12unMeth" = rep(0, times = 7),
"Meth12" = rep(0, times = 7),
"Meth13Meth" = rep(0, times = 7),
"Meth13sparseMeth" = rep(0, times = 7),
"Meth13unMeth" = rep(0, times = 7),
"Meth13" = rep(0, times = 7),
"Meth14Meth" = rep(0, times = 7),
"Meth14sparseMeth" = rep(0, times = 7),
"Meth14unMeth" = rep(0, times = 7),
"Meth14" = rep(0, times = 7),
"Meth15Meth" = rep(0, times = 7),
"Meth15sparseMeth" = rep(0, times = 7),
"Meth15unMeth" = rep(0, times = 7),
"Meth15" = rep(0, times = 7),
"Meth16Meth" = rep(0, times = 7),
"Meth16sparseMeth" = rep(0, times = 7),
"Meth16unMeth" = rep(0, times = 7),
"Meth16" = rep(0, times = 7),
"Meth17Meth" = rep(0, times = 7),
"Meth17sparseMeth" = rep(0, times = 7),
"Meth17unMeth" = rep(0, times = 7),
"Meth17" = rep(0, times = 7),
"Meth18Meth" = rep(0, times = 7),
"Meth18sparseMeth" = rep(0, times = 7),
"Meth18unMeth" = rep(0, times = 7),
"Meth18" = rep(0, times = 7)) #Create blank dataframe with information for various CpG categories and methylation status. Match columns to the order of columns in the overlap count files
row.names(McapFeatureOverlaps) <- c("Genes", "CDS", "Introns", "Flanking Regions", "Upstream Flanks", "Downstream Flanks", "Intergenic") #Assign row names
head(McapFeatureOverlaps) #Confirm changes
McapFeatureOverlaps$allCpGs <- c(McapGenomeFeatures$counts[5],
McapGenomeFeatures$counts[1],
McapGenomeFeatures$counts[7],
McapGenomeFeatures$counts[3],
McapGenomeFeatures$counts[4],
McapGenomeFeatures$counts[2],
McapGenomeFeatures$counts[6]) #Assign information for CG motif overlaps with genome features.
head(McapFeatureOverlaps) #Confirm modification
for (i in 1:length(McapGeneOverlaps$counts)) {
McapFeatureOverlaps[1,i+1] <- McapGeneOverlaps[i,1]
McapFeatureOverlaps[2,i+1] <- McapCDSOverlaps[i,1]
McapFeatureOverlaps[3,i+1] <- McapIntronsOverlaps[i,1]
McapFeatureOverlaps[4,i+1] <- McapFlanksOverlaps[i,1]
McapFeatureOverlaps[5,i+1] <- McapFlanksUpstreamOverlaps[i,1]
McapFeatureOverlaps[6,i+1] <- McapFlanksDownstreamOverlaps[i,1]
McapFeatureOverlaps[7,i+1] <- McapIntergenicOverlaps[i,1]
} #For each table with feature overlap information, paste the contents of the count column in the assigned row
tail(McapFeatureOverlaps) #Check summary table
write.table(McapFeatureOverlaps, "../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap_union-Genomic-Location-Counts.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
McapFeatureOverlapsPercents <- McapFeatureOverlaps[-c(1,4),] #Duplicate dataframe but remove gene and total flank rows
for (i in 1:length(McapFeatureOverlaps)) {
McapFeatureOverlapsPercents[,i] <- (McapFeatureOverlapsPercents[,i] / (sum(McapFeatureOverlapsPercents[,i]))) * 100
} #Divide every entry by sum of the column and multiply by 100 to get percentages. Do not include gene information
head(McapFeatureOverlapsPercents) #Check calculations
McapFeatureOverlapsPercents <- McapFeatureOverlaps[-c(1,4),-1] #Duplicate dataframe but remove gene and total flank rows
for (i in 1:length(McapFeatureOverlaps)) {
McapFeatureOverlapsPercents[,i] <- (McapFeatureOverlapsPercents[,i] / (sum(McapFeatureOverlapsPercents[,i]))) * 100
} #Divide every entry by sum of the column and multiply by 100 to get percentages. Do not include gene information
McapFeatureOverlapsPercents <- McapFeatureOverlaps[-c(1,4),] #Duplicate dataframe but remove gene and total flank rows
for (i in 1:length(McapFeatureOverlaps)) {
McapFeatureOverlapsPercents[,i] <- (McapFeatureOverlapsPercents[,i] / (sum(McapFeatureOverlapsPercents[,i]))) * 100
} #Divide every entry by sum of the column and multiply by 100 to get percentages. Do not include gene information
head(McapFeatureOverlapsPercents) #Check calculations
write.table(McapFeatureOverlapsPercents, "../analyses/Characterizing-CpG-Methylation-5x/Mcap/Mcap_union-Genomic-Location-Percents.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
PactGeneOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-5x-paGenes-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-gene overlaps
PactGeneOverlaps <- PactGeneOverlaps[-37,] #Remove final row
tail(PactGeneOverlaps) #Confirm import
PactCDSOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-5x-paCDS-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-CDS overlaps
PactCDSOverlaps <- PactCDSOverlaps[-37,] #Remove final row
tail(PactCDSOverlaps) #Confirm import
PactGenomeFeatures <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-CGMotif-Overlaps-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with CG motif and feature track overlaps
PactGenomeFeatures <- PactGenomeFeatures[-8,] #Remove final row
tail(PactGenomeFeatures) #Check import
PactIntronsOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-5x-paIntron-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
PactIntronsOverlaps <- PactIntronsOverlaps[-37,] #Remove final row
tail(PactIntronsOverlaps) #Confirm import
PactFlanksOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-5x-paFlanks-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
PactFlanksOverlaps <- PactFlanksOverlaps[-37,] #Remove final row
tail(PactFlanksOverlaps) #Confirm import
PactFlanksUpstreamOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-5x-paFlanksUpstream-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
PactFlanksUpstreamOverlaps <- PactFlanksUpstreamOverlaps[-37,] #Remove final row
tail(PactFlanksUpstreamOverlaps) #Confirm import
PactFlanksDownstreamOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-5x-paFlanksDownstream-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-downstream flanks overlaps
PactFlanksDownstreamOverlaps <- PactFlanksDownstreamOverlaps[-37,] #Remove final row
tail(PactFlanksDownstreamOverlaps) #Confirm import
PactIntergenicOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-5x-paIntergenic-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Intergenic overlaps
PactIntergenicOverlaps <- PactIntergenicOverlaps[-37,] #Remove final row
tail(PactIntergenicOverlaps) #Confirm import
PactFeatureOverlaps <- data.frame("allCpGs" = rep(0, times = 7),
"Meth1Meth" = rep(0, times = 7),
"Meth1sparseMeth" = rep(0, times = 7),
"Meth1unMeth" = rep(0, times = 7),
"Meth1" = rep(0, times = 7),
"Meth2Meth" = rep(0, times = 7),
"Meth2sparseMeth" = rep(0, times = 7),
"Meth2unMeth" = rep(0, times = 7),
"Meth2" = rep(0, times = 7),
"Meth3Meth" = rep(0, times = 7),
"Meth3sparseMeth" = rep(0, times = 7),
"Meth3unMeth" = rep(0, times = 7),
"Meth3" = rep(0, times = 7),
"Meth4Meth" = rep(0, times = 7),
"Meth4sparseMeth" = rep(0, times = 7),
"Meth4unMeth" = rep(0, times = 7),
"Meth4" = rep(0, times = 7),
"Meth5Meth" = rep(0, times = 7),
"Meth5sparseMeth" = rep(0, times = 7),
"Meth5unMeth" = rep(0, times = 7),
"Meth5" = rep(0, times = 7),
"Meth6Meth" = rep(0, times = 7),
"Meth6sparseMeth" = rep(0, times = 7),
"Meth6unMeth" = rep(0, times = 7),
"Meth6" = rep(0, times = 7),
"Meth7Meth" = rep(0, times = 7),
"Meth7sparseMeth" = rep(0, times = 7),
"Meth7unMeth" = rep(0, times = 7),
"Meth7" = rep(0, times = 7),
"Meth8Meth" = rep(0, times = 7),
"Meth8sparseMeth" = rep(0, times = 7),
"Meth8unMeth" = rep(0, times = 7),
"Meth8" = rep(0, times = 7),
"Meth9Meth" = rep(0, times = 7),
"Meth9sparseMeth" = rep(0, times = 7),
"Meth9unMeth" = rep(0, times = 7),
"Meth9" = rep(0, times = 7)) #Create blank dataframe with information for various CpG categories and methylation status. Match columns to the order of columns in the overlap count files
row.names(PactFeatureOverlaps) <- c("Genes", "CDS", "Introns", "Flanking Regions", "Upstream Flanks", "Downstream Flanks", "Intergenic") #Assign row names
head(PactFeatureOverlaps) #Confirm changes
PactFeatureOverlaps$allCpGs <- c(PactGenomeFeatures$counts[5],
PactGenomeFeatures$counts[1],
PactGenomeFeatures$counts[7],
PactGenomeFeatures$counts[3],
PactGenomeFeatures$counts[4],
PactGenomeFeatures$counts[2],
PactGenomeFeatures$counts[6]) #Assign information for CG motif overlaps with genome features.
head(PactFeatureOverlaps) #Confirm modification
for (i in 1:length(PactGeneOverlaps$counts)) {
PactFeatureOverlaps[1,i+1] <- PactGeneOverlaps[i,1]
PactFeatureOverlaps[2,i+1] <- PactCDSOverlaps[i,1]
PactFeatureOverlaps[3,i+1] <- PactIntronsOverlaps[i,1]
PactFeatureOverlaps[4,i+1] <- PactFlanksOverlaps[i,1]
PactFeatureOverlaps[5,i+1] <- PactFlanksUpstreamOverlaps[i,1]
PactFeatureOverlaps[6,i+1] <- PactFlanksDownstreamOverlaps[i,1]
PactFeatureOverlaps[7,i+1] <- PactIntergenicOverlaps[i,1]
} #For each table with feature overlap information, paste the contents of the count column in the assigned row
tail(PactFeatureOverlaps) #Check summary table
write.table(PactFeatureOverlaps, "../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact_union-Genomic-Location-Counts.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
PactFeatureOverlapsPercents <- PactFeatureOverlaps[-c(1,4),] #Duplicate dataframe but remove gene and total flank rows
for (i in 1:length(PactFeatureOverlaps)) {
PactFeatureOverlapsPercents[,i] <- (PactFeatureOverlapsPercents[,i] / (sum(PactFeatureOverlapsPercents[,i]))) * 100
} #Divide every entry by sum of the column and multiply by 100 to get percentages. Do not include gene information
head(PactFeatureOverlapsPercents) #Check calculations
write.table(PactFeatureOverlapsPercents, "../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact_union-Genomic-Location-Percents.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
