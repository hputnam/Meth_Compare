for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(10,6,2)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 3, adj = 0, "Methylated", at = c(0,100))
#Sparsely methylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(11,7,3)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(11,7,3)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "Proportion CpGs", line = 3, cex = 1.5, outer = TRUE) #Add y-axis label
#Unmethylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(12,8,4)])),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(12,8,4)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
dev.off() #Turn off plotting device
pdf("../Output/Mcap-CpG-Features-MethStatus.pdf", height = 8.5, width = 11)
par(mar = c(1,5,0,1), oma = c(4, 1, 1, 1), mfcol = c(3,1)) #Change figure boundaries
#Methylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(10,6,2)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(10,6,2)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 3, "Methylated", at = c(0,100))
#Sparsely methylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(11,7,3)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(11,7,3)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "Proportion CpGs", line = 3, cex = 1.5, outer = TRUE) #Add y-axis label
#Unmethylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(12,8,4)])),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(12,8,4)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
dev.off() #Turn off plotting device
pdf("../Output/Mcap-CpG-Features-MethStatus.pdf", height = 8.5, width = 11)
par(mar = c(1,5,0,1), oma = c(4, 1, 1, 1), mfcol = c(3,1)) #Change figure boundaries
#Methylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(10,6,2)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(10,6,2)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 3, "Methylated", at = c(0,90))
#Sparsely methylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(11,7,3)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(11,7,3)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "Proportion CpGs", line = 3, cex = 1.5, outer = TRUE) #Add y-axis label
#Unmethylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(12,8,4)])),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(12,8,4)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
dev.off() #Turn off plotting device
pdf("../Output/Mcap-CpG-Features-MethStatus.pdf", height = 8.5, width = 11)
par(mar = c(1,5,0,1), oma = c(4, 1, 1, 1), mfcol = c(3,1)) #Change figure boundaries
#Methylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(10,6,2)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(10,6,2)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
text(side = 3, "Methylated", at = c(0,90))
#Sparsely methylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(11,7,3)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(11,7,3)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "Proportion CpGs", line = 3, cex = 1.5, outer = TRUE) #Add y-axis label
#Unmethylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(12,8,4)])),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(12,8,4)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
dev.off() #Turn off plotting device
pdf("../Output/Mcap-CpG-Features-MethStatus.pdf", height = 8.5, width = 11)
par(mar = c(1,5,0,1), oma = c(4, 1, 1, 1), mfcol = c(3,1)) #Change figure boundaries
#Methylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(10,6,2)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(10,6,2)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Methylated", line = 3, cex = 1.5) #Add y-axis label
#Sparsely methylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(11,7,3)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(11,7,3)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Sparsely Methylated", line = 3, cex = 1.5) #Add y-axis label
#Unmethylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(12,8,4)])),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(12,8,4)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Unmethylated", line = 3, cex = 1.5) #Add y-axis label
dev.off() #Turn off plotting device
#pdf("../Output/Mcap-CpG-Features-MethStatus.pdf", height = 8.5, width = 11)
par(mar = c(1,5,0,1), oma = c(4, 1, 1, 1), mfcol = c(3,1)) #Change figure boundaries
#Methylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(10,6,2)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(10,6,2)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Methylated", line = 3, cex = 1.5) #Add y-axis label
#Sparsely methylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(11,7,3)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(11,7,3)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Sparsely Methylated", line = 3, cex = 1.5) #Add y-axis label
#Unmethylated CpGs
barplot(t(t(McapFeatureOverlapsPercents[,c(12,8,4)])),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(12,8,4)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Unmethylated", line = 3, cex = 1.5) #Add y-axis label
#dev.off() #Turn off plotting device
PactGenomeFeatures <- read.table("../analyses/Characterizing-CpG-Methylation-5x/Pact/Pact-CGMotif-Overlaps-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with CG motif and feature track overlaps
PactGenomeFeatures <- PactGenomeFeatures[-6,] #Remove final row
tail(PactGenomeFeatures) #Check import
PactGeneOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-mcGenes-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-gene overlaps
PactGeneOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-paGenes-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-gene overlaps
PactGeneOverlaps <- PactGeneOverlaps[-13,] #Remove final row
tail(PactGeneOverlaps) #Confirm import
PactCDSOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-paCDS-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-CDS overlaps
PactCDSOverlaps <- PactCDSOverlaps[-13,] #Remove final row
tail(PactCDSOverlaps) #Confirm import
PactIntronsOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-paIntrons-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
PactIntronsOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-paIntron-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
PactIntronsOverlaps <- PactIntronsOverlaps[-13,] #Remove final row
tail(PactIntronsOverlaps) #Confirm import
PactFlanksOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-paFlanks-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
PactFlanksOverlaps <- PactFlanksOverlaps[-13,] #Remove final row
tail(PactFlanksOverlaps) #Confirm import
PactIntergenicOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-paIntergenic-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Intergenic overlaps
PactIntergenicOverlaps <- PactIntergenicOverlaps[-13,] #Remove final row
tail(PactIntergenicOverlaps) #Confirm import
PactFeatureOverlaps <- data.frame("allCpGs" = rep(0, times = 5),
"MBDBSMeth" = rep(0, times = 5),
"MBDBSsparseMeth" = rep(0, times = 5),
"MBDBSunMeth" = rep(0, times = 5),
"MBDBS" = rep(0, times = 5),
"RRBSMeth" = rep(0, times = 5),
"RRBSsparseMeth" = rep(0, times = 5),
"RRBSunMeth" = rep(0, times = 5),
"RRBS" = rep(0, times = 5),
"WGBSMeth" = rep(0, times = 5),
"WGBSsparseMeth" = rep(0, times = 5),
"WGBSunMeth" = rep(0, times = 5),
"WGBS" = rep(0, times = 5)) #Create blank dataframe with information for various CpG categories and methylation status. Match columns to the order of columns in the overlap count files
row.names(PactFeatureOverlaps) <- c("Genes", "CDS", "Introns", "Flanks", "Intergenic") #Assign row names
head(PactFeatureOverlaps) #Confirm changes
PactFeatureOverlaps$allCpGs <- c(PactGenomeFeatures$counts[3],
PactGenomeFeatures$counts[1],
PactGenomeFeatures$counts[5],
PactGenomeFeatures$counts[2],
PactGenomeFeatures$counts[4]) #Assign information for CG motif overlaps with genome features. Use 0 for totalLines
head(PactFeatureOverlaps) #Confirm modification
for (i in 1:length(PactGeneOverlaps$counts)) {
PactFeatureOverlaps[1,i+1] <- PactGeneOverlaps[i,1]
PactFeatureOverlaps[2,i+1] <- PactCDSOverlaps[i,1]
PactFeatureOverlaps[3,i+1] <- PactIntronsOverlaps[i,1]
PactFeatureOverlaps[4,i+1] <- PactFlanksOverlaps[i,1]
PactFeatureOverlaps[5,i+1] <- PactIntergenicOverlaps[i,1]
} #For each table with feature overlap information, paste the contents of the count column in the assigned row
head(PactFeatureOverlaps) #Check summary table
write.table(PactFeatureOverlaps, "../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union-Genomic-Location-Counts.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
PactFeatureOverlapsPercents <- PactFeatureOverlaps[-1,] #Duplicate dataframe but remove gene row
for (i in 1:length(PactFeatureOverlaps)) {
PactFeatureOverlapsPercents[,i] <- (PactFeatureOverlapsPercents[,i] / (sum(PactFeatureOverlapsPercents[,i]))) * 100
} #Divide every entry by sum of the column and multiply by 100 to get percentages. Do not include gene information
head(PactFeatureOverlapsPercents) #Check calculations
write.table(PactFeatureOverlapsPercents, "../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union-Genomic-Location-Percents.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
PactFeatureAllWG <- chisq.test(PactFeatureOverlaps[,c(1,13)]) #All CpGs vs. WGBS
PactFeatureAllWG #The distribution of CpGs in genome features is not significantly different between all CpGs and WGBS
PactFeatureAllRR <- chisq.test(PactFeatureOverlaps[,c(1,9)]) #All CpGs vs. RRBS
PactFeatureAllRR #The distribution of CpGs in genome features is not significantly different between all CpGs and RRBS
PactFeatureAllMB <- chisq.test(PactFeatureOverlaps[,c(1,5)]) #All CpGs vs. MBDBS
PactFeatureAllMB #The distribution of CpGs in genome features is not significantly different between all CpGs and WGBS
PactFeatureWGRR <- chisq.test(PactFeatureOverlaps[,c(13, 9)]) #WGBS vs. RRBS
PactFeatureWGRR #The distribution of CpGs is not sginificantly different between WGBS and RRBS
PactFeatureWGMB <- chisq.test(PactFeatureOverlaps[,c(13, 5),]) #WGBS vs. MBD-BSSeq
PactFeatureWGMB #The distribution of CpGs is sginificantly different between WGBS and MBD-BSSeq
PactFeatureRRMB <- chisq.test(PactFeatureOverlaps[,c(9, 5)]) #RRBS vs. MBD-BSSeq
PactFeatureRRMB #The distribution of CpGs is not significantly different between RRBS vs. MBD-BSSeq
#pdf("../Output/Pact-CpG-Features.pdf", height = 8.5, width = 11)
par(mar = c(3,5,0,1), oma = c(2, 1, 1, 1)) #Change figure boundaries
barplot(t(t(PactFeatureOverlapsPercents[,c(1,13,9,5)])),
col= "white",
axes = FALSE,
names.arg = c("All", "WGBS", "RRBS", "MBD-BS"), cex.names = 1.2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(1,13,9,5)]))
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "Proportion CpGs", line = 3, cex = 1.5) #Add y-axis label
mtext(side = 1, "Sequencing Method", line = 3, cex = 1.5) #Add x-axis label
#dev.off() #Turn off plotting device
pdf("../Output/Pact-CpG-Features.pdf", height = 8.5, width = 11)
par(mar = c(3,5,0,1), oma = c(2, 1, 1, 1)) #Change figure boundaries
barplot(t(t(PactFeatureOverlapsPercents[,c(1,13,9,5)])),
col= "white",
axes = FALSE,
names.arg = c("All", "WGBS", "RRBS", "MBD-BS"), cex.names = 1.2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(1,13,9,5)]))
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "Proportion CpGs", line = 3, cex = 1.5) #Add y-axis label
mtext(side = 1, "Sequencing Method", line = 3, cex = 1.5) #Add x-axis label
dev.off() #Turn off plotting device
#pdf("../Output/Pact-CpG-Features.pdf", height = 8.5, width = 11)
par(mar = c(3,5,0,1), oma = c(2, 1, 1, 1)) #Change figure boundaries
barplot(t(t(PactFeatureOverlapsPercents[,c(1,13,9,5)])),
col= "white",
axes = FALSE,
names.arg = c("All", "WGBS", "RRBS", "MBD-BS"), cex.names = 1.2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(1,13,9,5)]))
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "Proportion CpGs", line = 3, cex = 1.5) #Add y-axis label
mtext(side = 1, "Sequencing Method", line = 3, cex = 1.5) #Add x-axis label
#dev.off() #Turn off plotting device
#pdf("../Output/Pact-CpG-Features-MethStatus.pdf", height = 8.5, width = 11)
par(mar = c(1,5,0,1), oma = c(4, 1, 1, 1), mfcol = c(3,1)) #Change figure boundaries
#Methylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(10,6,2)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(10,6,2)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Methylated", line = 3, cex = 1.5) #Add y-axis label
#Sparsely methylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(11,7,3)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(11,7,3)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Sparsely Methylated", line = 3, cex = 1.5) #Add y-axis label
#Unmethylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(12,8,4)])),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(12,8,4)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Unmethylated", line = 3, cex = 1.5) #Add y-axis label
#dev.off() #Turn off plotting device
pdf("../Output/Pact-CpG-Features-MethStatus.pdf", height = 8.5, width = 11)
par(mar = c(1,5,0,1), oma = c(4, 1, 1, 1), mfcol = c(3,1)) #Change figure boundaries
#Methylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(10,6,2)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(10,6,2)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Methylated", line = 3, cex = 1.5) #Add y-axis label
#Sparsely methylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(11,7,3)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(11,7,3)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Sparsely Methylated", line = 3, cex = 1.5) #Add y-axis label
#Unmethylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(12,8,4)])),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(12,8,4)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Unmethylated", line = 3, cex = 1.5) #Add y-axis label
dev.off() #Turn off plotting device
#pdf("../Output/Pact-CpG-Features-MethStatus.pdf", height = 8.5, width = 11)
par(mar = c(1,5,0,1), oma = c(4, 1, 1, 1), mfcol = c(3,1)) #Change figure boundaries
#Methylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(10,6,2)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(10,6,2)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Methylated", line = 3, cex = 1.5) #Add y-axis label
#Sparsely methylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(11,7,3)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(11,7,3)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Sparsely Methylated", line = 3, cex = 1.5) #Add y-axis label
#Unmethylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(12,8,4)])),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(12,8,4)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Unmethylated", line = 3, cex = 1.5) #Add y-axis label
#dev.off() #Turn off plotting device
