ct <- matrix(c(Method1Feature, Method2Feature, Method1NotFeature, Method2NotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(McapCpGLocationStatTest[i])), paste0("Not", colnames(McapCpGLocationStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(McapCpGLocationStatTest)[c(1,4)])) #Assign row names: genomic CpGs with data, method 3
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$GenomeFeature <- as.character(colnames(McapCpGLocationStatTest)[i]) #Add CpG type to results
McapCpGLocationAllMB <- rbind(McapCpGLocationAllMB, ctResults) #Add test statistics to master table
}
head(McapCpGLocationAllMB) #Look at statistical output
McapCpGLocationAllMB$p.adj <- p.adjust(McapCpGLocationAllMB$p.value, method = "fdr") #Correct p-value using FDR
McapCpGLocationAllMB$comparison <- rep("all vs. RRBS", times = 5) #Add methods compared
head(McapCpGLocationAllMB) #Confirm changes
McapCpGLocationWGRR <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(McapCpGLocationStatTest)) { #For each genome feature
Method1Feature <- McapCpGLocationStatTest[2,i] #Variable for # genome feature overlaps for method 1
Method2Feature <- McapCpGLocationStatTest[3,i] #Variable for # genome feature overlaps for method 2
Method1NotFeature <- sum(McapCpGLocationStatTest[2,-i]) #Variable for # other CpG types for method 1
Method2NotFeature <- sum(McapCpGLocationStatTest[3,-i]) #Variable for # other CpG types for method 2
ct <- matrix(c(Method1Feature, Method2Feature, Method1NotFeature, Method2NotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(McapCpGLocationStatTest[i])), paste0("Not", colnames(McapCpGLocationStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(McapCpGLocationStatTest)[c(2,3)])) #Assign row names: method 1, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$GenomeFeature <- as.character(colnames(McapCpGLocationStatTest)[i]) #Add CpG type to results
McapCpGLocationWGRR <- rbind(McapCpGLocationWGRR, ctResults) #Add test statistics to master table
}
head(McapCpGLocationWGRR) #Look at statistical output
McapCpGLocationWGRR$p.adj <- p.adjust(McapCpGLocationWGRR$p.value, method = "fdr") #Correct p-value using FDR
McapCpGLocationWGRR$comparison <- rep("WGBS vs. RRBS", times = 5) #Add methods compared
head(McapCpGLocationWGRR) #Confirm changes
McapCpGLocationWGMB <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(McapCpGLocationStatTest)) { #For each genome feature
Method1Feature <- McapCpGLocationStatTest[2,i] #Variable for # genome feature overlaps for method 1
Method2Feature <- McapCpGLocationStatTest[4,i] #Variable for # genome feature overlaps for method 3
Method1NotFeature <- sum(McapCpGLocationStatTest[2,-i]) #Variable for # other CpG types for method 1
Method2NotFeature <- sum(McapCpGLocationStatTest[4,-i]) #Variable for # other CpG types for method 3
ct <- matrix(c(Method1Feature, Method2Feature, Method1NotFeature, Method2NotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(McapCpGLocationStatTest[i])), paste0("Not", colnames(McapCpGLocationStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(McapCpGLocationStatTest)[c(2,4)])) #Assign row names: method 1, method 3
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$GenomeFeature <- as.character(colnames(McapCpGLocationStatTest)[i]) #Add CpG type to results
McapCpGLocationWGMB <- rbind(McapCpGLocationWGMB, ctResults) #Add test statistics to master table
}
head(McapCpGLocationWGMB) #Look at statistical output
McapCpGLocationWGMB$p.adj <- p.adjust(McapCpGLocationWGMB$p.value, method = "fdr") #Correct p-value using FDR
McapCpGLocationWGMB$comparison <- rep("WGBS vs. MBDBS", times = 5) #Add methods compared
head(McapCpGLocationWGMB) #Confirm changes
McapCpGLocationRRMB <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(McapCpGLocationStatTest)) { #For each genome feature
Method1Feature <- McapCpGLocationStatTest[3,i] #Variable for # genome feature overlaps for method 2
Method2Feature <- McapCpGLocationStatTest[4,i] #Variable for # genome feature overlaps for method 3
Method1NotFeature <- sum(McapCpGLocationStatTest[3,-i]) #Variable for # other CpG types for method 2
Method2NotFeature <- sum(McapCpGLocationStatTest[4,-i]) #Variable for # other CpG types for method 3
ct <- matrix(c(Method1Feature, Method2Feature, Method1NotFeature, Method2NotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(McapCpGLocationStatTest[i])), paste0("Not", colnames(McapCpGLocationStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(McapCpGLocationStatTest)[c(3,4)])) #Assign row names: method 2, method 3
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$GenomeFeature <- as.character(colnames(McapCpGLocationStatTest)[i]) #Add CpG type to results
McapCpGLocationRRMB <- rbind(McapCpGLocationRRMB, ctResults) #Add test statistics to master table
}
head(McapCpGLocationRRMB) #Look at statistical output
McapCpGLocationRRMB$p.adj <- p.adjust(McapCpGLocationRRMB$p.value, method = "fdr") #Correct p-value using FDR
McapCpGLocationRRMB$comparison <- rep("RRBS vs. MBDBS", times = 5) #Add methods compared
head(McapCpGLocationRRMB) #Confirm changes
McapCpGLocationStatOutput <- rbind(McapCpGLocationAllWG,
McapCpGLocationAllRR,
McapCpGLocationAllMB,
McapCpGLocationWGRR,
McapCpGLocationWGMB,
McapCpGLocationRRMB) #Combine tables from each group of contingency tests
head(McapCpGLocationStatOutput) #Confirm formatting
write.table(McapCpGLocationStatOutput, "../output/intermediate-files/02-Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union-CpG-Location-StatResults.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save statistical output
McapFeatureOverlapsPercents <- McapFeatureOverlaps[-c(1,4),] #Duplicate dataframe but remove gene and total flank rows
for (i in 1:length(McapFeatureOverlaps)) {
McapFeatureOverlapsPercents[,i] <- (McapFeatureOverlapsPercents[,i] / (sum(McapFeatureOverlapsPercents[,i]))) * 100
} #Divide every entry by sum of the column and multiply by 100 to get percentages. Do not include gene information
head(McapFeatureOverlapsPercents) #Check calculations
write.table(McapFeatureOverlapsPercents, "../output/intermediate-files/02-Characterizing-CpG-Methylation-5x-Union/Mcap/Mcap_union-Genomic-Location-Percents.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
plotColors2 <- c("grey20", "grey40", "grey60", "grey80", "grey100",
rev(RColorBrewer::brewer.pal(5, "Greens")),
rev(RColorBrewer::brewer.pal(5, "Purples")),
rev(RColorBrewer::brewer.pal(5, "Oranges"))) #Create vector of all, WGBS, RRBS, and MBD colors
barplot(t(t(McapFeatureOverlapsPercents)), col = dichromat(c(rev(RColorBrewer::brewer.pal(5, "Greens"))))) #Check greens
barplot(t(t(McapFeatureOverlapsPercents)), col = dichromat(c(rev(RColorBrewer::brewer.pal(5, "Purples"))))) #Check blues
barplot(t(t(McapFeatureOverlapsPercents)), col = dichromat(c(rev(RColorBrewer::brewer.pal(5, "Oranges"))))) #Check reds
barplot(t(t(McapFeatureOverlapsPercents[,c(1,13,9,5)])),
col= "white",
axes = FALSE,
names.arg = c("Genome", "WGBS", "RRBS", "MBDBS"), cex.names = 1.5,
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(1,13,9,5)]))
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors2[(5*i)-4], plotColors2[(5*i)-3], plotColors2[(5*i)-2], plotColors2[(5*i)-1], plotColors2[(5*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE) #Create new plot
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n") #Add new plot on top of current plot
legend(x = 0.57, y = 0.87,
xpd = TRUE,
legend = c("CDS", "Introns", "Upstream Flank", "Downstream Flank", "Intergenic"),
pch = 22,
col = "black",
pt.bg = c("grey20", "grey40", "grey60", "grey80", "grey100"),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
text("Genome Feature", x = 0.785, y = 0.879, cex = 1.5) #Add legend title that is aligned with legend
par(mar = c(1,5,0,1), oma = c(4, 1, 1, 11), mfcol = c(3,1)) #Change figure boundaries
#High methylation
barplot(t(t(McapFeatureOverlapsPercents[,c(10,6,2)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(10,6,2)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(5*i)-4], plotColors2[(5*i)-3], plotColors2[(5*i)-2], plotColors2[(5*i)-1], plotColors2[(5*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% High", line = 3, cex = 1.5) #Add y-axis label
#Moderate methylation
barplot(t(t(McapFeatureOverlapsPercents[,c(11,7,3)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(11,7,3)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(5*i)-4], plotColors2[(5*i)-3], plotColors2[(5*i)-2], plotColors2[(5*i)-1], plotColors2[(5*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Moderate", line = 3, cex = 1.5) #Add y-axis label
#Low methylation
barplot(t(t(McapFeatureOverlapsPercents[,c(12,8,4)])),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBDBS"), cex.names = 2,
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(McapFeatureOverlapsPercents[,c(12,8,4)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(5*i)-4], plotColors2[(5*i)-3], plotColors2[(5*i)-2], plotColors2[(5*i)-1], plotColors2[(5*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Low", line = 3, cex = 1.5) #Add y-axis label
#Add legend
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE) #Create new plot
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n") #Add new plot on top of current plot
legend(x = 0.73, y = 0.97,
xpd = TRUE,
legend = c("CDS", "Introns", "Upstream Flank", "Downstream Flank", "Intergenic"),
pch = 22,
col = "black",
pt.bg = c("grey20", "grey40", "grey60", "grey80", "grey100"),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
text("Genome Feature", x = 0.87, y = 0.97, cex = 1.5) #Add legend title that is aligned with legend
McapFeatureOverlapMethProps <- data.frame("WBGS" = (McapFeatureOverlaps$WGBSMeth / McapFeatureOverlaps$allCpGs),
"RRBS" = (McapFeatureOverlaps$RRBSMeth / McapFeatureOverlaps$allCpGs),
"MBDBS" = (McapFeatureOverlaps$MBDBSMeth / McapFeatureOverlaps$allCpGs)) #Divide # strong meth loci by all CpGs in a feature to get proportions
McapFeatureOverlapMethProps <- McapFeatureOverlapMethProps * 100 #Multiply by 100 to get percents
row.names(McapFeatureOverlapMethProps) <- row.names(McapFeatureOverlaps) #Assign row names
McapFeatureOverlapMethProps <- McapFeatureOverlapMethProps[-c(1,4),] #Remove genes and total flanks information
head(McapFeatureOverlapMethProps) #Confirm proportions
barsMcap <- barplot(t(McapFeatureOverlapMethProps),
beside = TRUE, horiz = TRUE,
col = c(plotColors2[7], plotColors2[12], plotColors2[17]),
xlim = c(0,8),
axes = FALSE, names.arg = rep("", times = 5)) #Create a horizontal barplot with comparative proportions. Color based on sequencing method and do not include any axes. Use blanks as y-axis labels. Save barplot information.
axis(side = 2, at = barsMcap[2,], labels = row.names(McapFeatureOverlapMethProps), tick = FALSE, las = 2, col = "grey80", cex.axis = 1.5) #Add y-axis labels at the center of grouped bars. Remove tick marks and change label orientation.
axis(side = 1, at = seq(from = 0, to = 8, by = 2), cex = 1.2, col = "grey80") #Add x-axis
mtext(side = 1, "Strongly Methylated CpGs/All CpGs (%)", line = 3, cex = 1.5) #Add x-axis label
legend("topright",
xpd = TRUE,
legend = c("WGBS", "RRBS", "MBDBS"),
pch = 22,
col = "black",
pt.bg = c(plotColors2[7], plotColors2[12], plotColors2[17]),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
PactGenomeFeatures <- read.table("../output/intermediate-files/02-Characterizing-CpG-Methylation-5x/Pact/Pact-CGMotif-Overlaps-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with CG motif and feature track overlaps
PactGenomeFeatures <- PactGenomeFeatures[-8,] #Remove final row
tail(PactGenomeFeatures) #Check import
PactGeneOverlaps <- read.table("../output/intermediate-files/02-Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-paGenes-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-gene overlaps
PactGeneOverlaps <- PactGeneOverlaps[-13,] #Remove final row
tail(PactGeneOverlaps) #Confirm import
PactCDSOverlaps <- read.table("../output/intermediate-files/02-Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-paCDS-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-CDS overlaps
PactCDSOverlaps <- PactCDSOverlaps[-13,] #Remove final row
tail(PactCDSOverlaps) #Confirm import
PactIntronsOverlaps <- read.table("../output/intermediate-files/02-Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-paIntron-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
PactIntronsOverlaps <- PactIntronsOverlaps[-13,] #Remove final row
tail(PactIntronsOverlaps) #Confirm import
PactFlanksOverlaps <- read.table("../output/intermediate-files/02-Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-paFlanks-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
PactFlanksOverlaps <- PactFlanksOverlaps[-13,] #Remove final row
tail(PactFlanksOverlaps) #Confirm import
PactFlanksUpstreamOverlaps <- read.table("../output/intermediate-files/02-Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-paFlanksUpstream-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
PactFlanksUpstreamOverlaps <- PactFlanksUpstreamOverlaps[-13,] #Remove final row
tail(PactFlanksUpstreamOverlaps) #Confirm import
PactFlanksDownstreamOverlaps <- read.table("../output/intermediate-files/02-Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-paFlanksDownstream-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
PactFlanksDownstreamOverlaps <- PactFlanksDownstreamOverlaps[-13,] #Remove final row
tail(PactFlanksDownstreamOverlaps) #Confirm import
PactIntergenicOverlaps <- read.table("../output/intermediate-files/02-Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-paIntergenic-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Intergenic overlaps
PactIntergenicOverlaps <- PactIntergenicOverlaps[-13,] #Remove final row
tail(PactIntergenicOverlaps) #Confirm import
PactFeatureOverlaps <- data.frame("allCpGs" = rep(0, times = 7),
"MBDBSMeth" = rep(0, times = 7),
"MBDBSsparseMeth" = rep(0, times = 7),
"MBDBSunMeth" = rep(0, times = 7),
"MBDBS" = rep(0, times = 7),
"RRBSMeth" = rep(0, times = 7),
"RRBSsparseMeth" = rep(0, times = 7),
"RRBSunMeth" = rep(0, times = 7),
"RRBS" = rep(0, times = 7),
"WGBSMeth" = rep(0, times = 7),
"WGBSsparseMeth" = rep(0, times = 7),
"WGBSunMeth" = rep(0, times = 7),
"WGBS" = rep(0, times = 7)) #Create blank dataframe with information for various CpG categories and methylation status. Match columns to the order of columns in the overlap count files
row.names(PactFeatureOverlaps) <- c("Genes", "CDS", "Introns", "Flanks", "Upstream Flanks", "Downstream Flanks", "Intergenic") #Assign row names
head(PactFeatureOverlaps) #Confirm changes
PactFeatureOverlaps$allCpGs <- c(PactGenomeFeatures$counts[5],
PactGenomeFeatures$counts[1],
PactGenomeFeatures$counts[7],
PactGenomeFeatures$counts[3],
PactGenomeFeatures$counts[4],
PactGenomeFeatures$counts[2],
PactGenomeFeatures$counts[6]) #Assign information for CG motif overlaps with genome features. Use 0 for totalLines
head(PactFeatureOverlaps) #Confirm modification
for (i in 1:length(PactGeneOverlaps$counts)) {
PactFeatureOverlaps[1,i+1] <- PactGeneOverlaps[i,1]
PactFeatureOverlaps[2,i+1] <- PactCDSOverlaps[i,1]
PactFeatureOverlaps[3,i+1] <- PactIntronsOverlaps[i,1]
PactFeatureOverlaps[4,i+1] <- PactFlanksOverlaps[i,1]
PactFeatureOverlaps[5,i+1] <- PactFlanksUpstreamOverlaps[i,1]
PactFeatureOverlaps[6,i+1] <- PactFlanksDownstreamOverlaps[i,1]
PactFeatureOverlaps[7,i+1] <- PactIntergenicOverlaps[i,1]
} #For each table with feature overlap information, paste the contents of the count column in the assigned row
tail(PactFeatureOverlaps) #Check summary table
write.table(PactFeatureOverlaps, "../output/intermediate-files/02-Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union-Genomic-Location-Counts.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
PactCpGLocationStatTest <- data.frame(t(PactFeatureOverlaps[,c(1, 13, 9, 5)])) #Subset all CpG and library preparation methods, transpose, and save as a dataframe
PactCpGLocationStatTest <- PactCpGLocationStatTest[,-c(1, 4)] #Remove gene and flank information
head(PactCpGLocationStatTest) #Confirm formatting
PactCpGLocationAllWG <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(PactCpGLocationStatTest)) { #For each genome feature
Method1Feature <- PactCpGLocationStatTest[1,i] #Variable for # genome feature overlaps for genomic CpGs with data
Method2Feature <- PactCpGLocationStatTest[2,i] #Variable for # genome feature overlaps for method 1
Method1NotFeature <- sum(PactCpGLocationStatTest[1,-i]) #Variable for # other CpG types for genomic CpGs with data
Method2NotFeature <- sum(PactCpGLocationStatTest[2,-i]) #Variable for # other CpG types for method 1
ct <- matrix(c(Method1Feature, Method2Feature, Method1NotFeature, Method2NotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(PactCpGLocationStatTest[i])), paste0("Not", colnames(PactCpGLocationStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(PactCpGLocationStatTest)[c(1,2)])) #Assign row names: genomic CpGs with data, method 1
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$GenomeFeature <- as.character(colnames(PactCpGLocationStatTest)[i]) #Add CpG type to results
PactCpGLocationAllWG <- rbind(PactCpGLocationAllWG, ctResults) #Add test statistics to master table
}
head(PactCpGLocationAllWG) #Look at statistical output
PactCpGLocationAllWG$p.adj <- p.adjust(PactCpGLocationAllWG$p.value, method = "fdr") #Correct p-value using FDR
PactCpGLocationAllWG$comparison <- rep("all vs. WGBS", times = 5) #Add methods compared
head(PactCpGLocationAllWG) #Confirm changes
PactCpGLocationAllRR <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(PactCpGLocationStatTest)) { #For each genome feature
Method1Feature <- PactCpGLocationStatTest[1,i] #Variable for # genome feature overlaps for genomic CpGs with data
Method2Feature <- PactCpGLocationStatTest[3,i] #Variable for # genome feature overlaps for method 2
Method1NotFeature <- sum(PactCpGLocationStatTest[1,-i]) #Variable for # other CpG types for genomic CpGs with data
Method2NotFeature <- sum(PactCpGLocationStatTest[3,-i]) #Variable for # other CpG types for method 2
ct <- matrix(c(Method1Feature, Method2Feature, Method1NotFeature, Method2NotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(PactCpGLocationStatTest[i])), paste0("Not", colnames(PactCpGLocationStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(PactCpGLocationStatTest)[c(1,3)])) #Assign row names: genomic CpGs with data, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$GenomeFeature <- as.character(colnames(PactCpGLocationStatTest)[i]) #Add CpG type to results
PactCpGLocationAllRR <- rbind(PactCpGLocationAllRR, ctResults) #Add test statistics to master table
}
head(PactCpGLocationAllRR) #Look at statistical output
PactCpGLocationAllRR$p.adj <- p.adjust(PactCpGLocationAllRR$p.value, method = "fdr") #Correct p-value using FDR
PactCpGLocationAllRR$comparison <- rep("all vs. RRBS", times = 5) #Add methods compared
head(PactCpGLocationAllRR) #Confirm changes
PactCpGLocationAllMB <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(PactCpGLocationStatTest)) { #For each genome feature
Method1Feature <- PactCpGLocationStatTest[1,i] #Variable for # genome feature overlaps for genomic CpGs with data
Method2Feature <- PactCpGLocationStatTest[4,i] #Variable for # genome feature overlaps for method 3
Method1NotFeature <- sum(PactCpGLocationStatTest[1,-i]) #Variable for # other CpG types for genomic CpGs with data
Method2NotFeature <- sum(PactCpGLocationStatTest[4,-i]) #Variable for # other CpG types for method 3
ct <- matrix(c(Method1Feature, Method2Feature, Method1NotFeature, Method2NotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(PactCpGLocationStatTest[i])), paste0("Not", colnames(PactCpGLocationStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(PactCpGLocationStatTest)[c(1,4)])) #Assign row names: genomic CpGs with data, method 3
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$GenomeFeature <- as.character(colnames(PactCpGLocationStatTest)[i]) #Add CpG type to results
PactCpGLocationAllMB <- rbind(PactCpGLocationAllMB, ctResults) #Add test statistics to master table
}
head(PactCpGLocationAllMB) #Look at statistical output
PactCpGLocationAllMB$p.adj <- p.adjust(PactCpGLocationAllMB$p.value, method = "fdr") #Correct p-value using FDR
PactCpGLocationAllMB$comparison <- rep("all vs. RRBS", times = 5) #Add methods compared
head(PactCpGLocationAllMB) #Confirm changes
PactCpGLocationWGRR <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(PactCpGLocationStatTest)) { #For each genome feature
Method1Feature <- PactCpGLocationStatTest[2,i] #Variable for # genome feature overlaps for method 1
Method2Feature <- PactCpGLocationStatTest[3,i] #Variable for # genome feature overlaps for method 2
Method1NotFeature <- sum(PactCpGLocationStatTest[2,-i]) #Variable for # other CpG types for method 1
Method2NotFeature <- sum(PactCpGLocationStatTest[3,-i]) #Variable for # other CpG types for method 2
ct <- matrix(c(Method1Feature, Method2Feature, Method1NotFeature, Method2NotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(PactCpGLocationStatTest[i])), paste0("Not", colnames(PactCpGLocationStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(PactCpGLocationStatTest)[c(2,3)])) #Assign row names: method 1, method 2
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$GenomeFeature <- as.character(colnames(PactCpGLocationStatTest)[i]) #Add CpG type to results
PactCpGLocationWGRR <- rbind(PactCpGLocationWGRR, ctResults) #Add test statistics to master table
}
head(PactCpGLocationWGRR) #Look at statistical output
PactCpGLocationWGRR$p.adj <- p.adjust(PactCpGLocationWGRR$p.value, method = "fdr") #Correct p-value using FDR
PactCpGLocationWGRR$comparison <- rep("WGBS vs. RRBS", times = 5) #Add methods compared
head(PactCpGLocationWGRR) #Confirm changes
PactCpGLocationWGMB <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(PactCpGLocationStatTest)) { #For each genome feature
Method1Feature <- PactCpGLocationStatTest[2,i] #Variable for # genome feature overlaps for method 1
Method2Feature <- PactCpGLocationStatTest[4,i] #Variable for # genome feature overlaps for method 3
Method1NotFeature <- sum(PactCpGLocationStatTest[2,-i]) #Variable for # other CpG types for method 1
Method2NotFeature <- sum(PactCpGLocationStatTest[4,-i]) #Variable for # other CpG types for method 3
ct <- matrix(c(Method1Feature, Method2Feature, Method1NotFeature, Method2NotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(PactCpGLocationStatTest[i])), paste0("Not", colnames(PactCpGLocationStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(PactCpGLocationStatTest)[c(2,4)])) #Assign row names: method 1, method 3
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$GenomeFeature <- as.character(colnames(PactCpGLocationStatTest)[i]) #Add CpG type to results
PactCpGLocationWGMB <- rbind(PactCpGLocationWGMB, ctResults) #Add test statistics to master table
}
head(PactCpGLocationWGMB) #Look at statistical output
PactCpGLocationWGMB$p.adj <- p.adjust(PactCpGLocationWGMB$p.value, method = "fdr") #Correct p-value using FDR
PactCpGLocationWGMB$comparison <- rep("WGBS vs. MBDBS", times = 5) #Add methods compared
head(PactCpGLocationWGMB) #Confirm changes
PactCpGLocationRRMB <- data.frame() #Create empty dataframe to store chi-squared results
for(i in 1:ncol(PactCpGLocationStatTest)) { #For each genome feature
Method1Feature <- PactCpGLocationStatTest[3,i] #Variable for # genome feature overlaps for method 2
Method2Feature <- PactCpGLocationStatTest[4,i] #Variable for # genome feature overlaps for method 3
Method1NotFeature <- sum(PactCpGLocationStatTest[3,-i]) #Variable for # other CpG types for method 2
Method2NotFeature <- sum(PactCpGLocationStatTest[4,-i]) #Variable for # other CpG types for method 3
ct <- matrix(c(Method1Feature, Method2Feature, Method1NotFeature, Method2NotFeature), ncol = 2) #Create contingency table
colnames(ct) <- c(as.character(colnames(PactCpGLocationStatTest[i])), paste0("Not", colnames(PactCpGLocationStatTest[i]))) #Assign column names: type, not type
rownames(ct) <- c(as.character(row.names(PactCpGLocationStatTest)[c(3,4)])) #Assign row names: method 2, method 3
print(ct) #Confirm table is correct
ctResults <- data.frame(broom::tidy(chisq.test(ct))) #Create dataframe storing chi-sq stats results. Use broom::tidy to extract results from test output
ctResults$GenomeFeature <- as.character(colnames(PactCpGLocationStatTest)[i]) #Add CpG type to results
PactCpGLocationRRMB <- rbind(PactCpGLocationRRMB, ctResults) #Add test statistics to master table
}
head(PactCpGLocationRRMB) #Look at statistical output
PactCpGLocationRRMB$p.adj <- p.adjust(PactCpGLocationRRMB$p.value, method = "fdr") #Correct p-value using FDR
PactCpGLocationRRMB$comparison <- rep("RRBS vs. MBDBS", times = 5) #Add methods compared
head(PactCpGLocationRRMB) #Confirm changes
PactCpGLocationStatOutput <- rbind(PactCpGLocationAllWG,
PactCpGLocationAllRR,
PactCpGLocationAllMB,
PactCpGLocationWGRR,
PactCpGLocationWGMB,
PactCpGLocationRRMB) #Combine tables from each group of contingency tests
head(PactCpGLocationStatOutput) #Confirm formatting
write.table(PactCpGLocationStatOutput, "../output/intermediate-files/02-Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union-CpG-Location-StatResults.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save statistical output
PactFeatureOverlapsPercents <- PactFeatureOverlaps[-c(1,4),] #Duplicate dataframe but remove gene and total flank rows
for (i in 1:length(PactFeatureOverlaps)) {
PactFeatureOverlapsPercents[,i] <- (PactFeatureOverlapsPercents[,i] / (sum(PactFeatureOverlapsPercents[,i]))) * 100
} #Divide every entry by sum of the column and multiply by 100 to get percentages. Do not include gene information
head(PactFeatureOverlapsPercents) #Check calculations
write.table(PactFeatureOverlapsPercents, "../output/intermediate-files/02-Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union-Genomic-Location-Percents.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
barplot(t(t(PactFeatureOverlapsPercents[,c(1,13,9,5)])),
col= "white",
axes = FALSE,
names.arg = c("Genome", "WGBS", "RRBS", "MBDBS"), cex.names = 1.5,
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(1,13,9,5)]))
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors2[(5*i)-4], plotColors2[(5*i)-3], plotColors2[(5*i)-2], plotColors2[(5*i)-1], plotColors2[(5*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% CpGs", line = 3, cex = 1.5) #Add y-axis label
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE) #Create new plot
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n") #Add new plot on top of current plot
legend(x = 0.57, y = 0.87,
xpd = TRUE,
legend = c("CDS", "Introns", "Upstream Flank", "Downstream Flank", "Intergenic"),
pch = 22,
col = "black",
pt.bg = c("grey20", "grey40", "grey60", "grey80", "grey100"),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
text("Genome Feature", x = 0.785, y = 0.879, cex = 1.5) #Add legend title that is aligned with legend
par(mar = c(1,5,0,1), oma = c(4, 1, 1, 11), mfcol = c(3,1)) #Change figure boundaries
#High methylation
barplot(t(t(PactFeatureOverlapsPercents[,c(10,6,2)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(10,6,2)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(5*i)-4], plotColors2[(5*i)-3], plotColors2[(5*i)-2], plotColors2[(5*i)-1], plotColors2[(5*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% High", line = 3, cex = 1.5) #Add y-axis label
#Moderate methylation
barplot(t(t(PactFeatureOverlapsPercents[,c(11,7,3)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(11,7,3)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(5*i)-4], plotColors2[(5*i)-3], plotColors2[(5*i)-2], plotColors2[(5*i)-1], plotColors2[(5*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Moderate", line = 3, cex = 1.5) #Add y-axis label
#Low methylation
barplot(t(t(PactFeatureOverlapsPercents[,c(12,8,4)])),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBDBS"), cex.names = 2,
ylim = c(0, 110)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(12,8,4)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(5*i)-4], plotColors2[(5*i)-3], plotColors2[(5*i)-2], plotColors2[(5*i)-1], plotColors2[(5*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Low", line = 3, cex = 1.5) #Add y-axis label
#Add legend
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE) #Create new plot
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n") #Add new plot on top of current plot
legend(x = 0.73, y = 0.97,
xpd = TRUE,
legend = c("CDS", "Introns", "Upstream Flank", "Downstream Flank", "Intergenic"),
pch = 22,
col = "black",
pt.bg = c("grey20", "grey40", "grey60", "grey80", "grey100"),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
text("Genome Feature", x = 0.87, y = 0.97, cex = 1.5) #Add legend title that is aligned with legend
PactFeatureOverlapMethProps <- data.frame("WBGS" = (PactFeatureOverlaps$WGBSMeth / PactFeatureOverlaps$allCpGs),
"RRBS" = (PactFeatureOverlaps$RRBSMeth / PactFeatureOverlaps$allCpGs),
"MBDBS" = (PactFeatureOverlaps$MBDBSMeth / PactFeatureOverlaps$allCpGs)) #Divide # strong meth loci by all CpGs in a feature to get proportions
PactFeatureOverlapMethProps <- PactFeatureOverlapMethProps * 100 #Multiply by 100 to get percents
row.names(PactFeatureOverlapMethProps) <- row.names(PactFeatureOverlaps) #Assign row names
PactFeatureOverlapMethProps <- PactFeatureOverlapMethProps[-c(1,4),] #Remove genes and total flanks information
head(PactFeatureOverlapMethProps) #Confirm proportions
barsPact <- barplot(t(PactFeatureOverlapMethProps),
beside = TRUE, horiz = TRUE,
col = c(plotColors2[7], plotColors2[12], plotColors2[17]),
xlim = c(0,6),
axes = FALSE, names.arg = rep("", times = 5)) #Create a horizontal barplot with comparative proportions. Color based on sequencing method and do not include any axes. Use blanks as y-axis labels. Save barplot information.
axis(side = 2, at = barsPact[2,], labels = row.names(PactFeatureOverlapMethProps), tick = FALSE, las = 2, col = "grey80", cex.axis = 1.5) #Add y-axis labels at the center of grouped bars. Remove tick marks and change label orientation.
axis(side = 1, at = seq(from = 0, to = 6, by = 2), cex = 1.2, col = "grey80") #Add x-axis
mtext(side = 1, "Strongly Methylated CpGs/All CpGs (%)", line = 3, cex = 1.5) #Add x-axis label
legend("topright",
xpd = TRUE,
legend = c("WGBS", "RRBS", "MBDBS"),
pch = 22,
col = "black",
pt.bg = c(plotColors2[7], plotColors2[12], plotColors2[17]),
bty = "n",
cex = 1.5,
x.intersp = 0.7, xjust = 0) #Place a legend in the top right of the figure with no box
CpGLocationStatOutput <- rbind(McapCpGLocationStatOutput,
PactCpGLocationStatOutput) #Combine tables
head(CpGLocationStatOutput)
nrow(McapCpGLocationStatOutput)
ncol(McapCpGLocationStatOutput)
CpGLocationStatOutput <- rbind(McapCpGLocationStatOutput,
PactCpGLocationStatOutput) #Combine tables
CpGLocationStatOutput$species <- c(rep("Mcap", times = 30),
rep("Pact"), times = 30) #Add species information
CpGLocationStatOutput <- rbind(McapCpGLocationStatOutput,
PactCpGLocationStatOutput) #Combine tables
CpGLocationStatOutput$species <- c(rep("Mcap", times = 31),
rep("Pact"), times = 31) #Add species information
CpGLocationStatOutput <- rbind(McapCpGLocationStatOutput,
PactCpGLocationStatOutput) #Combine tables
CpGLocationStatOutput$species <- c(rep("Mcap", times = 30),
rep("Pact", times = 30)) #Add species information
CpGLocationStatOutput <- CpGLocationStatOutput[,-2] #Remove unadjusted P-value
head(CpGLocationStatOutput)
CpGLocationStatOutput <- rbind(McapCpGLocationStatOutput,
PactCpGLocationStatOutput) #Combine tables
CpGLocationStatOutput$species <- c(rep("Mcap", times = 30),
rep("Pact", times = 30)) #Add species information
head(CpGLocationStatOutput)
ncol(CpGLocationStatOutput)
CpGLocationStatOutput <- rbind(McapCpGLocationStatOutput,
PactCpGLocationStatOutput) #Combine tables
CpGLocationStatOutput$species <- c(rep("Mcap", times = 30),
rep("Pact", times = 30)) #Add species information
CpGLocationStatOutput <- CpGLocationStatOutput[,c(8,4,7,5,1,6)] #Rearrange columns
head(CpGLocationStatOutput)
write.csv(CpGLocationStatOutput, "../output/supplemental-material/ST7.csv",  quote = FALSE, row.names = FALSE) #Save file
