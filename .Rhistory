tail(PactFlanksOverlaps) #Confirm import
PactIntergenicOverlaps <- read.table("../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union_5x-paIntergenic-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Intergenic overlaps
PactIntergenicOverlaps <- PactIntergenicOverlaps[-13,] #Remove final row
tail(PactIntergenicOverlaps) #Confirm import
PactFeatureOverlaps <- data.frame("allCpGs" = rep(0, times = 5),
"MBDBSMeth" = rep(0, times = 5),
"MBDBSsparseMeth" = rep(0, times = 5),
"MBDBSunMeth" = rep(0, times = 5),
"MBDBS" = rep(0, times = 5),
"RRBSMeth" = rep(0, times = 5),
"RRBSsparseMeth" = rep(0, times = 5),
"RRBSunMeth" = rep(0, times = 5),
"RRBS" = rep(0, times = 5),
"WGBSMeth" = rep(0, times = 5),
"WGBSsparseMeth" = rep(0, times = 5),
"WGBSunMeth" = rep(0, times = 5),
"WGBS" = rep(0, times = 5)) #Create blank dataframe with information for various CpG categories and methylation status. Match columns to the order of columns in the overlap count files
row.names(PactFeatureOverlaps) <- c("Genes", "CDS", "Introns", "Flanks", "Intergenic") #Assign row names
head(PactFeatureOverlaps) #Confirm changes
PactFeatureOverlaps$allCpGs <- c(PactGenomeFeatures$counts[3],
PactGenomeFeatures$counts[1],
PactGenomeFeatures$counts[5],
PactGenomeFeatures$counts[2],
PactGenomeFeatures$counts[4]) #Assign information for CG motif overlaps with genome features. Use 0 for totalLines
head(PactFeatureOverlaps) #Confirm modification
for (i in 1:length(PactGeneOverlaps$counts)) {
PactFeatureOverlaps[1,i+1] <- PactGeneOverlaps[i,1]
PactFeatureOverlaps[2,i+1] <- PactCDSOverlaps[i,1]
PactFeatureOverlaps[3,i+1] <- PactIntronsOverlaps[i,1]
PactFeatureOverlaps[4,i+1] <- PactFlanksOverlaps[i,1]
PactFeatureOverlaps[5,i+1] <- PactIntergenicOverlaps[i,1]
} #For each table with feature overlap information, paste the contents of the count column in the assigned row
head(PactFeatureOverlaps) #Check summary table
write.table(PactFeatureOverlaps, "../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union-Genomic-Location-Counts.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
PactFeatureOverlapsPercents <- PactFeatureOverlaps[-1,] #Duplicate dataframe but remove gene row
for (i in 1:length(PactFeatureOverlaps)) {
PactFeatureOverlapsPercents[,i] <- (PactFeatureOverlapsPercents[,i] / (sum(PactFeatureOverlapsPercents[,i]))) * 100
} #Divide every entry by sum of the column and multiply by 100 to get percentages. Do not include gene information
head(PactFeatureOverlapsPercents) #Check calculations
write.table(PactFeatureOverlapsPercents, "../analyses/Characterizing-CpG-Methylation-5x-Union/Pact/Pact_union-Genomic-Location-Percents.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
PactFeatureAllWG <- chisq.test(PactFeatureOverlaps[,c(1,13)]) #All CpGs vs. WGBS
PactFeatureAllWG #The distribution of CpGs in genome features is not significantly different between all CpGs and WGBS
PactFeatureAllRR <- chisq.test(PactFeatureOverlaps[,c(1,9)]) #All CpGs vs. RRBS
PactFeatureAllRR #The distribution of CpGs in genome features is not significantly different between all CpGs and RRBS
PactFeatureAllMB <- chisq.test(PactFeatureOverlaps[,c(1,5)]) #All CpGs vs. MBDBS
PactFeatureAllMB #The distribution of CpGs in genome features is not significantly different between all CpGs and WGBS
PactFeatureWGRR <- chisq.test(PactFeatureOverlaps[,c(13, 9)]) #WGBS vs. RRBS
PactFeatureWGRR #The distribution of CpGs is not sginificantly different between WGBS and RRBS
PactFeatureWGMB <- chisq.test(PactFeatureOverlaps[,c(13, 5),]) #WGBS vs. MBD-BSSeq
PactFeatureWGMB #The distribution of CpGs is sginificantly different between WGBS and MBD-BSSeq
PactFeatureRRMB <- chisq.test(PactFeatureOverlaps[,c(9, 5)]) #RRBS vs. MBD-BSSeq
PactFeatureRRMB #The distribution of CpGs is not significantly different between RRBS vs. MBD-BSSeq
#pdf("../Output/Pact-CpG-Features.pdf", height = 8.5, width = 11)
par(mar = c(3,5,0,1), oma = c(2, 1, 1, 1)) #Change figure boundaries
barplot(t(t(PactFeatureOverlapsPercents[,c(1,13,9,5)])),
col= "white",
axes = FALSE,
names.arg = c("All", "WGBS", "RRBS", "MBD-BS"), cex.names = 1.2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(1,13,9,5)]))
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "Proportion CpGs", line = 3, cex = 1.5) #Add y-axis label
mtext(side = 1, "Sequencing Method", line = 3, cex = 1.5) #Add x-axis label
#dev.off() #Turn off plotting device
pdf("../Output/Pact-CpG-Features.pdf", height = 8.5, width = 11)
par(mar = c(3,5,0,1), oma = c(2, 1, 1, 1)) #Change figure boundaries
barplot(t(t(PactFeatureOverlapsPercents[,c(1,13,9,5)])),
col= "white",
axes = FALSE,
names.arg = c("All", "WGBS", "RRBS", "MBD-BS"), cex.names = 1.2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(1,13,9,5)]))
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "Proportion CpGs", line = 3, cex = 1.5) #Add y-axis label
mtext(side = 1, "Sequencing Method", line = 3, cex = 1.5) #Add x-axis label
dev.off() #Turn off plotting device
#pdf("../Output/Pact-CpG-Features.pdf", height = 8.5, width = 11)
par(mar = c(3,5,0,1), oma = c(2, 1, 1, 1)) #Change figure boundaries
barplot(t(t(PactFeatureOverlapsPercents[,c(1,13,9,5)])),
col= "white",
axes = FALSE,
names.arg = c("All", "WGBS", "RRBS", "MBD-BS"), cex.names = 1.2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 1:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(1,13,9,5)]))
xx[,-i] <- NA
colnames(xx)[-i] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "Proportion CpGs", line = 3, cex = 1.5) #Add y-axis label
mtext(side = 1, "Sequencing Method", line = 3, cex = 1.5) #Add x-axis label
#dev.off() #Turn off plotting device
#pdf("../Output/Pact-CpG-Features-MethStatus.pdf", height = 8.5, width = 11)
par(mar = c(1,5,0,1), oma = c(4, 1, 1, 1), mfcol = c(3,1)) #Change figure boundaries
#Methylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(10,6,2)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(10,6,2)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Methylated", line = 3, cex = 1.5) #Add y-axis label
#Sparsely methylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(11,7,3)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(11,7,3)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Sparsely Methylated", line = 3, cex = 1.5) #Add y-axis label
#Unmethylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(12,8,4)])),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(12,8,4)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Unmethylated", line = 3, cex = 1.5) #Add y-axis label
#dev.off() #Turn off plotting device
pdf("../Output/Pact-CpG-Features-MethStatus.pdf", height = 8.5, width = 11)
par(mar = c(1,5,0,1), oma = c(4, 1, 1, 1), mfcol = c(3,1)) #Change figure boundaries
#Methylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(10,6,2)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(10,6,2)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Methylated", line = 3, cex = 1.5) #Add y-axis label
#Sparsely methylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(11,7,3)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(11,7,3)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Sparsely Methylated", line = 3, cex = 1.5) #Add y-axis label
#Unmethylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(12,8,4)])),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(12,8,4)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Unmethylated", line = 3, cex = 1.5) #Add y-axis label
dev.off() #Turn off plotting device
#pdf("../Output/Pact-CpG-Features-MethStatus.pdf", height = 8.5, width = 11)
par(mar = c(1,5,0,1), oma = c(4, 1, 1, 1), mfcol = c(3,1)) #Change figure boundaries
#Methylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(10,6,2)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(10,6,2)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Methylated", line = 3, cex = 1.5) #Add y-axis label
#Sparsely methylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(11,7,3)])),
col= "white",
axes = FALSE,
names.arg = c("", "", ""),
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(11,7,3)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Sparsely Methylated", line = 3, cex = 1.5) #Add y-axis label
#Unmethylated CpGs
barplot(t(t(PactFeatureOverlapsPercents[,c(12,8,4)])),
col= "white",
axes = FALSE,
names.arg = c("WGBS", "RRBS", "MBD-BS"), cex.names = 2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
for (i in 2:4) {
xx <- t(t(PactFeatureOverlapsPercents[,c(12,8,4)]))
xx[,-(i-1)] <- NA
colnames(xx)[-(i-1)] <- NA
barplot(xx, col = c(plotColors2[(4*i)-3], plotColors2[(4*i)-2], plotColors2[(4*i)-1], plotColors2[(4*i)]), add = TRUE, axes = FALSE, names.arg = c("", "", ""))
} #Make each bar in the stacked barplot a different color gradient. Create a new dataframe with data for the plot and ignore all additional columns and column names. Plot the single bar with the correct color from plotColors. Do not add axes and add blank names for each column.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "% Unmethylated", line = 3, cex = 1.5) #Add y-axis label
#dev.off() #Turn off plotting device
knitr::opts_chunk$set(echo = TRUE)
#install.packages("RColorBrewer")
require(RColorBrewer) #Load RColorBrewer
#install.packages("dichromat")
require(dichromat)
sessionInfo()
PactDMC <- read.table("../analyses/Identifying-genomic-locations/Pact/Pact-DMC-data-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with DMC line counts
tail(PactDMC) #Check import
PactDMC <- PactDMC[-3,] #Remove final row
tail(PactDMC) #Check import
PactDMCGeneOverlaps <- read.table("../analyses/Identifying-genomic-locations/Pact/Pact-DMC-data-paGenes-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-gene overlaps
PactDMCGeneOverlaps <- PactDMCGeneOverlaps[-3,] #Remove final row
tail(PactDMCGeneOverlaps) #Confirm import
PactDMCCDSOverlaps <- read.table("../analyses/Identifying-genomic-locations/Pact/Pact-DMC-data-paCDS-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-CDS overlaps
PactDMCCDSOverlaps <- PactDMCCDSOverlaps[-3,] #Remove final row
tail(PactDMCCDSOverlaps) #Confirm import
PactDMCIntronsOverlaps <- read.table("../analyses/Identifying-genomic-locations/Pact/Pact-DMC-data-paIntron-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
PactDMCIntronsOverlaps <- PactDMCIntronsOverlaps[-3,] #Remove final row
tail(PactDMCIntronsOverlaps) #Confirm import
PactDMCFlanksOverlaps <- read.table("../analyses/Identifying-genomic-locations/Pact/Pact-DMC-data-paFlanks-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
PactDMCFlanksOverlaps <- PactDMCFlanksOverlaps[-3,] #Remove final row
tail(PactDMCFlanksOverlaps) #Confirm import
PactDMCIntergenicOverlaps <- read.table("../analyses/Identifying-genomic-locations/Pact/Pact-DMC-data-paIntergenic-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Intergenic overlaps
PactDMCIntergenicOverlaps <- PactDMCIntergenicOverlaps[-3,] #Remove final row
tail(PactDMCIntergenicOverlaps) #Confirm import
PactDMCFeatureOverlaps <- cbind(PactDMC,
PactDMCGeneOverlaps,
PactDMCCDSOverlaps,
PactDMCIntronsOverlaps,
PactDMCFlanksOverlaps,
PactDMCIntergenicOverlaps) #Use cbind to combine individual dataframes
head(PactDMCFeatureOverlaps)
row.names(PactDMCFeatureOverlaps) <- c("RvM", "WvM") #Add rownames based on original files
seq(1,12,2)
PactDMCFeatureOverlaps <- PactDMCFeatureOverlaps[,c(seq(1,12,2))] #Only keep count columns
head(PactDMCFeatureOverlaps) #Confirm changes
PactDMCFeatureOverlaps <- cbind(PactDMC,
PactDMCGeneOverlaps,
PactDMCCDSOverlaps,
PactDMCIntronsOverlaps,
PactDMCFlanksOverlaps,
PactDMCIntergenicOverlaps) #Use cbind to combine individual dataframes
PactDMCFeatureOverlaps <- PactDMCFeatureOverlaps[,c(seq(1,12,2))] #Only keep count columns
colnames(PactDMCFeatureOverlaps) <- c("All", "Genes", "CDS", "Introns", "Flanks", "Intergenic") #Add column names
row.names(PactDMCFeatureOverlaps) <- c("RvM", "WvM") #Add rownames based on original files
head(PactDMCFeatureOverlaps) #Confirm changes
PactDMCFeatureOverlaps <- cbind(PactDMC,
PactDMCGeneOverlaps,
PactDMCCDSOverlaps,
PactDMCIntronsOverlaps,
PactDMCFlanksOverlaps,
PactDMCIntergenicOverlaps) #Use cbind to combine individual dataframes
PactDMCFeatureOverlaps <- PactDMCFeatureOverlaps[,c(seq(1,12,2))] #Only keep count columns
colnames(PactDMCFeatureOverlaps) <- c("All", "Genes", "CDS", "Introns", "Flanks", "Intergenic") #Add column names
row.names(PactDMCFeatureOverlaps) <- c("RvM", "WvM") #Add rownames based on original files
PactDMCFeatureOverlaps <- data.frame(t(PactDMCFeatureOverlaps)) #Transpose dataframe
head(PactDMCFeatureOverlaps) #Confirm changes
write.table(PactDMCFeatureOverlaps, "../analyses/Identifying-genomic-locations/Pact/Pact-DMC-Feature-Overlap-counts.txt", sep = "\t", header = TRUE, row.names = TRUE)
write.table(PactDMCFeatureOverlaps, "../analyses/Identifying-genomic-locations/Pact/Pact-DMC-Feature-Overlap-counts.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save summary table
sum(PactDMCFeatureOverlaps$RvM[3:6])
PactDMCFeatureOverlaps <- cbind(PactDMCGeneOverlaps,
PactDMCCDSOverlaps,
PactDMCIntronsOverlaps,
PactDMCFlanksOverlaps,
PactDMCIntergenicOverlaps) #Use cbind to combine individual dataframes
PactDMCFeatureOverlaps <- PactDMCFeatureOverlaps[,c(seq(1,12,2))] #Only keep count columns
PactDMCFeatureOverlaps <- cbind(PactDMCGeneOverlaps,
PactDMCCDSOverlaps,
PactDMCIntronsOverlaps,
PactDMCFlanksOverlaps,
PactDMCIntergenicOverlaps) #Use cbind to combine individual dataframes
PactDMCFeatureOverlaps <- PactDMCFeatureOverlaps[,c(seq(1,10,2))] #Only keep count columns
colnames(PactDMCFeatureOverlaps) <- c("Genes", "CDS", "Introns", "Flanks", "Intergenic") #Add column names
row.names(PactDMCFeatureOverlaps) <- c("RvM", "WvM") #Add rownames based on original files
PactDMCFeatureOverlaps <- data.frame(t(PactDMCFeatureOverlaps)) #Transpose dataframe
head(PactDMCFeatureOverlaps) #Confirm changes
write.table(PactDMCFeatureOverlaps, "../analyses/Identifying-genomic-locations/Pact/Pact-DMC-Feature-Overlap-counts.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save summary table
length(PactDMCFeatureOverlaps)
PactDMCFeatureOverlapsPercents <- PactDMCFeatureOverlaps[-1] #Remove gene overlap information and save as a new dataframe
for (i in 1:length(PactDMCFeatureOverlapsPercents)) {
PactDMCFeatureOverlapsPercents[,i] <- (PactDMCFeatureOverlapsPercents[,i] / sum(PactDMCFeatureOverlapsPercents[,i])) * 100
} #Calculate percentages
head(PactDMCFeatureOverlapsPercents)
PactDMCFeatureOverlapsPercents <- PactDMCFeatureOverlaps[-1,] #Remove gene overlap information and save as a new dataframe
for (i in 1:length(PactDMCFeatureOverlapsPercents)) {
PactDMCFeatureOverlapsPercents[,i] <- (PactDMCFeatureOverlapsPercents[,i] / sum(PactDMCFeatureOverlapsPercents[,i])) * 100
} #Calculate percentages
head(PactDMCFeatureOverlapsPercents)
write.table(PactDMCFeatureOverlapsPercents, "../analyses/Identifying-genomic-locations/Pact/Pact-DMC-Feature-Overlap-percents.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save summary table
McapUpsetGeneOverlaps <- read.table("../analyses/Identifying-genomic-locations/Mcap/Mcap-upset-data-mcGenes-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-gene overlaps
tail(McapUpsetGeneOverlaps) #Confirm import
McapUpsetGeneOverlaps <- read.table("../analyses/Identifying-genomic-locations/Mcap/Mcap-upset-data-mcGenes-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-gene overlaps
McapUpsetGeneOverlaps <- McapUpsetGeneOverlaps[-9,] #Remove final row
tail(McapUpsetGeneOverlaps) #Confirm import
McapUpsetCDSOverlaps <- read.table("../analyses/Identifying-genomic-locations/Mcap/Mcap-upset-data-mcCDS-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-CDS overlaps
McapUpsetCDSOverlaps <- McapUpsetCDSOverlaps[-9,] #Remove final row
tail(McapUpsetCDSOverlaps) #Confirm import
McapUpsetIntronsOverlaps <- read.table("../analyses/Identifying-genomic-locations/Mcap/Mcap-upset-data-mcIntrons-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
McapUpsetIntronsOverlaps <- McapUpsetIntronsOverlaps[-9,] #Remove final row
tail(McapUpsetIntronsOverlaps) #Confirm import
McapUpsetFlanksOverlaps <- read.table("../analyses/Identifying-genomic-locations/Mcap/Mcap-upset-data-mcFlanks-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
McapUpsetFlanksOverlaps <- McapUpsetFlanksOverlaps[-9,] #Remove final row
tail(McapUpsetFlanksOverlaps) #Confirm import
McapUpsetIntergenicOverlaps <- read.table("../analyses/Identifying-genomic-locations/Mcap/Mcap-upset-data-mcIntergenic-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Intergenic overlaps
McapUpsetIntergenicOverlaps <- McapUpsetIntergenicOverlaps[-9,] #Remove final row
tail(McapUpsetIntergenicOverlaps) #Confirm import
McapUpsetFeatureOverlaps <- cbind(McapUpsetGeneOverlaps,
McapUpsetCDSOverlaps,
McapUpsetIntronsOverlaps,
McapUpsetFlanksOverlaps,
McapUpsetIntergenicOverlaps) #Use cbind to combine individual dataframes
head(McapUpsetFeatureOverlaps) #Confirm changes
McapUpsetFeatureOverlaps <- McapUpsetFeatureOverlaps[,c(seq(1,10,2))] #Only keep count columns
head(McapUpsetFeatureOverlaps) #Confirm changes
McapUpsetFeatureOverlaps <- cbind(McapUpsetGeneOverlaps,
McapUpsetCDSOverlaps,
McapUpsetIntronsOverlaps,
McapUpsetFlanksOverlaps,
McapUpsetIntergenicOverlaps) #Use cbind to combine individual dataframes
head(McapUpsetFeatureOverlaps) #Confirm changes
tail(McapUpsetFeatureOverlaps) #Confirm changes
McapUpsetFeatureOverlaps <- cbind(McapUpsetGeneOverlaps,
McapUpsetCDSOverlaps,
McapUpsetIntronsOverlaps,
McapUpsetFlanksOverlaps,
McapUpsetIntergenicOverlaps) #Use cbind to combine individual dataframes
McapUpsetFeatureOverlaps <- McapUpsetFeatureOverlaps[,c(seq(1,10,2))] #Only keep count columns
colnames(McapUpsetFeatureOverlaps) <- c("Genes", "CDS", "Introns", "Flanks", "Intergenic") #Add column names
row.names(McapUpsetFeatureOverlaps) <- c("MBD",
"RRBS.MBD",
"RRBS",
"WGBS.MBD",
"WGBS.RRBS.MBD",
"WGBS.RRBS",
"WGBS",
"None") #Add rownames based on original files
McapUpsetFeatureOverlaps <- data.frame(t(McapUpsetFeatureOverlaps)) #Transpose dataframe
tail(McapUpsetFeatureOverlaps) #Confirm changes
McapUpsetFeatureOverlaps <- McapUpsetFeatureOverlaps[,c(5,6,4,2,7,3,1,8)] #Reorganize columns
tail(McapUpsetFeatureOverlaps) #Confirm changes
write.table(McapUpsetFeatureOverlaps, "../analyses/Identifying-genomic-locations/Mcap/Mcap-upset-data-Feature-Overlap-Counts.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
McapUpsetFeatureOverlapsPercents <- McapUpsetFeatureOverlaps[-1,] #Duplicate but without gene information
McapUpsetFeatureOverlapsPercents <- McapUpsetFeatureOverlaps[-1,] #Duplicate but without gene information
for (i in length(McapUpsetFeatureOverlaps)) {
McapUpsetFeatureOverlapsPercents <- (McapUpsetFeatureOverlapsPercents[,i] / sum(McapUpsetFeatureOverlaps[,i])) * 100
} #Calculate percentages
head(McapUpsetFeatureOverlaps) #Confirm calculations
head(McapUpsetFeatureOverlapsPercents) #Confirm calculations
McapUpsetFeatureOverlapsPercents <- McapUpsetFeatureOverlaps[-1,] #Duplicate but without gene information
for (i in length(McapUpsetFeatureOverlaps)) {
McapUpsetFeatureOverlapsPercents[,i] <- (McapUpsetFeatureOverlapsPercents[,i] / sum(McapUpsetFeatureOverlaps[,i])) * 100
} #Calculate percentages
head(McapUpsetFeatureOverlapsPercents) #Confirm calculations
McapUpsetFeatureOverlapsPercents <- McapUpsetFeatureOverlaps[-1,] #Duplicate but without gene information
for (i in length(McapUpsetFeatureOverlapsPercents)) {
McapUpsetFeatureOverlapsPercents[,i] <- (McapUpsetFeatureOverlapsPercents[,i] / sum(McapUpsetFeatureOverlapsPercents[,i])) * 100
} #Calculate percentages
head(McapUpsetFeatureOverlapsPercents) #Confirm calculations
McapUpsetFeatureOverlapsPercents <- McapUpsetFeatureOverlaps[-1,] #Duplicate but without gene information
for (i in 1:length(McapUpsetFeatureOverlapsPercents)) {
McapUpsetFeatureOverlapsPercents[,i] <- (McapUpsetFeatureOverlapsPercents[,i] / sum(McapUpsetFeatureOverlapsPercents[,i])) * 100
} #Calculate percentages
head(McapUpsetFeatureOverlapsPercents) #Confirm calculations
write.table(McapUpsetFeatureOverlapsPercents, "../analyses/Identifying-genomic-locations/Mcap/Mcap-upset-data-Feature-Overlap-Percents.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
barplot(McapUpsetFeatureOverlapsPercents)
barplot(t(t(McapUpsetFeatureOverlapsPercents)))
par(mar = c(3,5,0,1), oma = c(2, 1, 1, 1)) #Change figure boundaries
barplot(t(t(McapUpsetFeatureOverlapsPercents)),
col= c("grey20", "grey40", "grey60", "grey80"),
axes = FALSE,
names.arg = c("WRM", "WR", "WM", "RM", "W", "R", "M", "None"), cex.names = 1.2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
par(mar = c(3,5,0,1), oma = c(2, 1, 1, 1)) #Change figure boundaries
barplot(t(t(McapUpsetFeatureOverlapsPercents)),
col= c("grey20", "grey40", "grey60", "grey80"),
axes = FALSE,
names.arg = c("WRM", "WR", "WM", "RM", "W", "R", "M", "None"), cex.names = 1.2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
#pdf("../Output/Mcap-Upset-Feature-Overlaps.pdf", height = 8.5, width = 11)
par(mar = c(3,5,0,1), oma = c(2, 1, 1, 1)) #Change figure boundaries
barplot(t(t(McapUpsetFeatureOverlapsPercents)),
col= c("grey20", "grey40", "grey60", "grey80"),
axes = FALSE,
names.arg = c("WRM", "WR", "WM", "RM", "W", "R", "M", "None"), cex.names = 1.2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "Proportion CpGs", line = 3, cex = 1.5) #Add y-axis label
mtext(side = 1, "Sequencing Method", line = 3, cex = 1.5) #Add x-axis label
#dev.off() #Turn off plotting device
pdf("../Output/Mcap-Upset-Feature-Overlaps.pdf", height = 8.5, width = 11)
par(mar = c(3,5,0,1), oma = c(2, 1, 1, 1)) #Change figure boundaries
barplot(t(t(McapUpsetFeatureOverlapsPercents)),
col= c("grey20", "grey40", "grey60", "grey80"),
axes = FALSE,
names.arg = c("WRM", "WR", "WM", "RM", "W", "R", "M", "None"), cex.names = 1.2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "Proportion CpGs", line = 3, cex = 1.5) #Add y-axis label
mtext(side = 1, "Sequencing Method", line = 3, cex = 1.5) #Add x-axis label
dev.off() #Turn off plotting device
#pdf("../Output/Mcap-Upset-Feature-Overlaps.pdf", height = 8.5, width = 11)
par(mar = c(3,5,0,1), oma = c(2, 1, 1, 1)) #Change figure boundaries
barplot(t(t(McapUpsetFeatureOverlapsPercents)),
col= c("grey20", "grey40", "grey60", "grey80"),
axes = FALSE,
names.arg = c("WRM", "WR", "WM", "RM", "W", "R", "M", "None"), cex.names = 1.2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "Proportion CpGs", line = 3, cex = 1.5) #Add y-axis label
mtext(side = 1, "Sequencing Method", line = 3, cex = 1.5) #Add x-axis label
#dev.off() #Turn off plotting device
PactUpsetGeneOverlaps <- read.table("../analyses/Identifying-genomic-locations/Pact/Pact-upset-data-mcGenes-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-gene overlaps
PactUpsetGeneOverlaps <- read.table("../analyses/Identifying-genomic-locations/Pact/Pact-upset-data-paGenes-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-gene overlaps
PactUpsetGeneOverlaps <- PactUpsetGeneOverlaps[-9,] #Remove final row
tail(PactUpsetGeneOverlaps) #Confirm import
PactUpsetCDSOverlaps <- read.table("../analyses/Identifying-genomic-locations/Pact/Pact-upset-data-paCDS-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-CDS overlaps
PactUpsetCDSOverlaps <- PactUpsetCDSOverlaps[-9,] #Remove final row
tail(PactUpsetCDSOverlaps) #Confirm import
PactUpsetIntronsOverlaps <- read.table("../analyses/Identifying-genomic-locations/Pact/Pact-upset-data-paIntron-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
PactUpsetIntronsOverlaps <- PactUpsetIntronsOverlaps[-9,] #Remove final row
tail(PactUpsetIntronsOverlaps) #Confirm import
PactUpsetFlanksOverlaps <- read.table("../analyses/Identifying-genomic-locations/Pact/Pact-upset-data-paFlanks-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Introns overlaps
PactUpsetFlanksOverlaps <- PactUpsetFlanksOverlaps[-9,] #Remove final row
tail(PactUpsetFlanksOverlaps) #Confirm import
PactUpsetIntergenicOverlaps <- read.table("../analyses/Identifying-genomic-locations/Pact/Pact-upset-data-paIntergenic-counts.txt", header = FALSE, col.names = c("counts", "filename")) #Import file with all file-Intergenic overlaps
PactUpsetIntergenicOverlaps <- PactUpsetIntergenicOverlaps[-9,] #Remove final row
tail(PactUpsetIntergenicOverlaps) #Confirm import
PactUpsetFeatureOverlaps <- cbind(PactUpsetGeneOverlaps,
PactUpsetCDSOverlaps,
PactUpsetIntronsOverlaps,
PactUpsetFlanksOverlaps,
PactUpsetIntergenicOverlaps) #Use cbind to combine individual dataframes
PactUpsetFeatureOverlaps <- PactUpsetFeatureOverlaps[,c(seq(1,10,2))] #Only keep count columns
colnames(PactUpsetFeatureOverlaps) <- c("Genes", "CDS", "Introns", "Flanks", "Intergenic") #Add column names
row.names(PactUpsetFeatureOverlaps) <- c("MBD",
"RRBS.MBD",
"RRBS",
"WGBS.MBD",
"WGBS.RRBS.MBD",
"WGBS.RRBS",
"WGBS",
"None") #Add rownames based on original files
PactUpsetFeatureOverlaps <- data.frame(t(PactUpsetFeatureOverlaps)) #Transpose dataframe
PactUpsetFeatureOverlaps <- PactUpsetFeatureOverlaps[,c(5,6,4,2,7,3,1,8)] #Reorganize columns
tail(PactUpsetFeatureOverlaps) #Confirm changes
write.table(PactUpsetFeatureOverlaps, "../analyses/Identifying-genomic-locations/Pact/Pact-upset-data-Feature-Overlap-Counts.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
PactUpsetFeatureOverlapsPercents <- PactUpsetFeatureOverlaps[-1,] #Duplicate but without gene information
for (i in 1:length(PactUpsetFeatureOverlapsPercents)) {
PactUpsetFeatureOverlapsPercents[,i] <- (PactUpsetFeatureOverlapsPercents[,i] / sum(PactUpsetFeatureOverlapsPercents[,i])) * 100
} #Calculate percentages
head(PactUpsetFeatureOverlapsPercents) #Confirm calculations
write.table(PactUpsetFeatureOverlapsPercents, "../analyses/Identifying-genomic-locations/Pact/Pact-upset-data-Feature-Overlap-Percents.txt", sep = "\t", quote = FALSE, row.names = TRUE) #Save file
pdf("../Output/Pact-Upset-Feature-Overlaps.pdf", height = 8.5, width = 11)
par(mar = c(3,5,0,1), oma = c(2, 1, 1, 1)) #Change figure boundaries
barplot(t(t(PactUpsetFeatureOverlapsPercents)),
col= c("grey20", "grey40", "grey60", "grey80"),
axes = FALSE,
names.arg = c("WRM", "WR", "WM", "RM", "W", "R", "M", "None"), cex.names = 1.2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "Proportion CpGs", line = 3, cex = 1.5) #Add y-axis label
mtext(side = 1, "Sequencing Method", line = 3, cex = 1.5) #Add x-axis label
dev.off() #Turn off plotting device
#pdf("../Output/Pact-Upset-Feature-Overlaps.pdf", height = 8.5, width = 11)
par(mar = c(3,5,0,1), oma = c(2, 1, 1, 1)) #Change figure boundaries
barplot(t(t(PactUpsetFeatureOverlapsPercents)),
col= c("grey20", "grey40", "grey60", "grey80"),
axes = FALSE,
names.arg = c("WRM", "WR", "WM", "RM", "W", "R", "M", "None"), cex.names = 1.2,
ylim = c(0, 115)) #Create base plot. Everything should be white. Do not plot axes. Include sequencing type as labels and set size. Set y-axis specs.
axis(side = 2, at = seq(0, 100, by = 10), las = 2, col = "grey80", cex.axis = 1.2) #Add y-axis
mtext(side = 2, "Proportion CpGs", line = 3, cex = 1.5) #Add y-axis label
mtext(side = 1, "Sequencing Method", line = 3, cex = 1.5) #Add x-axis label
#dev.off() #Turn off plotting device
